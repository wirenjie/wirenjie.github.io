<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux之Shell编程</title>
    <url>/2021/05/06/Linux/Linux%E4%B9%8BShell%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="shell-bian-cheng"><a class="header-anchor" href="#Shell编程">¶</a>Shell编程</h2>
<h3 id="shell-gai-shu"><a class="header-anchor" href="#Shell概述">¶</a>Shell概述</h3>
<ul>
<li>
<p>命令行解释器</p>
</li>
<li>
<p>为用户提供向Linux内核发送请求来运行程序的界面系统级程序</p>
</li>
<li>
<p>用户可以用Shell启动、挂起、停止甚至编写一些程序</p>
</li>
<li>
<p>还是一个强大的编程语言</p>
</li>
<li>
<p>易编写、易调试</p>
</li>
<li>
<p>也是解释执行的脚本语言</p>
</li>
<li>
<p>Shell中可以直接调用Linux系统命令</p>
</li>
<li>
<p>Shell分类</p>
<ul>
<li>
<p>Bourne Shell，主文件名为sh</p>
<ul>
<li>包括sh、ksh、Bash、psh、zsh</li>
<li>Bash和sh兼容</li>
<li>目前主流Shell就是Bash</li>
</ul>
</li>
<li>
<p>C Shell，主要在BSD版的Unix系统中，语法类似C</p>
<ul>
<li>包括csh、tcsh</li>
</ul>
</li>
<li>
<p>两种Shell不兼容</p>
</li>
</ul>
</li>
<li>
<p>Linux支持的Shell</p>
<ul>
<li>/etc/shells</li>
</ul>
</li>
</ul>
<h3 id="shell-jiao-ben-zhi-xing-fang-shi"><a class="header-anchor" href="#Shell脚本执行方式">¶</a>Shell脚本执行方式</h3>
<ul>
<li>
<p>echo命令</p>
<ul>
<li>
<p>echo  【选项】【输出内容】</p>
</li>
<li>
<p>-e，支持反斜线控制字符转换</p>
<ul>
<li>\输出\本身</li>
<li>\a，警告音</li>
<li>\b，退格键，左删除键</li>
<li>\c，取消输出行末的换行符</li>
<li>\e，ESCAPE键</li>
<li>\f，换页符</li>
<li>\n，换行符</li>
<li>\r，回车键</li>
<li>\t，制表符，也就是tab键</li>
<li>\v，垂直制表符</li>
<li>\0nnn，八进制ASCII码输出，0为数字，nnn是八进制数</li>
<li>\xhh，按照十六进制ASCII码输出，hh是两位十六进制</li>
</ul>
</li>
</ul>
</li>
<li>
<p>写脚本</p>
<ul>
<li>
<p>vi  <a href="http://XXX.sh">XXX.sh</a></p>
</li>
<li>
<p>#! /bin/bash</p>
<ul>
<li>这不是注释，说明以下是shell脚本</li>
<li>不写极容易脚本运行出错</li>
</ul>
</li>
</ul>
</li>
<li>
<p>执行脚本</p>
<ul>
<li>
<p>赋予执行权限，直接运行</p>
<ul>
<li>chmod 755 <a href="http://XXX.sh">XXX.sh</a></li>
<li>./XXX.sh</li>
</ul>
</li>
<li>
<p>通过Bash调用执行脚本</p>
<ul>
<li>bash <a href="http://XXX.sh">XXX.sh</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p>dos2unix  <a href="http://XXX.sh">XXX.sh</a></p>
<ul>
<li>将脚本文件从Windows格式转换为unix格式</li>
<li>windows中编辑的脚本回车格式和linux回车不一致</li>
</ul>
</li>
</ul>
<h3 id="bash-ji-ben-gong-neng"><a class="header-anchor" href="#Bash基本功能">¶</a>Bash基本功能</h3>
<ul>
<li>
<p>历史命令与命令补全</p>
<ul>
<li>
<p>history，查看历史命令</p>
<ul>
<li>
<p>-c，清空历史命令，谨慎使用</p>
</li>
<li>
<p>-w，历史命令写入保存文件~/.bash_history</p>
</li>
<li>
<p>历史命令默认保存1000条</p>
</li>
<li>
<p>环境变量文件/etc/profile中可修改</p>
</li>
<li>
<p>调用</p>
<ul>
<li>!n，重复执行第n条命令</li>
<li>!!，重复执行上一条命令</li>
<li>!字串，重复执行最后一条以该字串开头的命令</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Tab键可以补全命令、文件或目录</p>
</li>
<li>
<p>按两次Tab键给出所有选择浏览</p>
</li>
</ul>
</li>
<li>
<p>命令别名和常用快捷键</p>
<ul>
<li>
<p>命令别名</p>
<ul>
<li>alias  别名 = ‘原命令’</li>
<li>alias，查询命令别名</li>
<li>重启系统别名就会消失</li>
<li>让别名永久生效 vi /root/.bashrc</li>
<li>删除别名 unalias 别名</li>
</ul>
</li>
<li>
<p>命令执行时顺序</p>
<ul>
<li>第一顺位执行用绝对/相对路径执行的命令</li>
<li>第二顺位执行别名</li>
<li>第三顺位执行Bash的内部命令</li>
<li>第四顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令</li>
</ul>
</li>
<li>
<p>Bash常用快捷键</p>
<ul>
<li>ctrl+a，光标移动到命令开头</li>
<li>ctrl+e，光标移动到命令末尾</li>
<li>（常用）ctrl+c，强制终止当前命令</li>
<li>（常用）ctrl+l，清屏</li>
<li>（常用）ctrl+u，删除或剪切光标之前的命令</li>
<li>ctrl+k，删除或剪切光标之后的命令</li>
<li>（常用）ctrl+y，粘贴剪切的内容</li>
<li>（常用）ctrl+r，在历史命令中搜索</li>
<li>（常用）ctrl+d，退出当前终端</li>
<li>ctrl+z，暂停，并放入后台</li>
<li>ctrl+s，暂停屏幕输出</li>
<li>ctrl+q，回复屏幕输出</li>
</ul>
</li>
</ul>
</li>
<li>
<p>输入输出重定向</p>
<ul>
<li>
<p>标准输入输出</p>
<ul>
<li>
<p>键盘</p>
<ul>
<li>设备文件名/dev/stdin</li>
<li>文件描述符0</li>
<li>类型为标准输入</li>
</ul>
</li>
<li>
<p>显示器</p>
<ul>
<li>
<p>/dev/stdout</p>
<ul>
<li>文件描述符为1</li>
<li>标准输出</li>
</ul>
</li>
<li>
<p>/dev/stderr</p>
<ul>
<li>文件描述符为2</li>
<li>标准错误输出</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>输出重定向</p>
<ul>
<li>
<p>作用：把命令执行结果保存下来</p>
</li>
<li>
<p>标准输出重定向</p>
<ul>
<li>
<p>命令 &gt;  文件</p>
<ul>
<li>以覆盖的方式</li>
<li>命令的输出输出到指定文件或设备中</li>
</ul>
</li>
<li>
<p>命令 &gt;&gt;  文件</p>
<ul>
<li>以追加的方式</li>
<li>输出到指定文件或设备中</li>
</ul>
</li>
</ul>
</li>
<li>
<p>标准错误输出重定向</p>
<ul>
<li>
<p>错误命令  2&gt; 文件</p>
<ul>
<li>以覆盖的方式</li>
<li>把命令错误输出到指定文件或设备中</li>
</ul>
</li>
<li>
<p>错误命令  2&gt;&gt;  文件</p>
<ul>
<li>以追加方式</li>
<li>把命令错误输出到指定文件或设备中</li>
</ul>
</li>
</ul>
</li>
<li>
<p>正确和错误输出同时保存</p>
<ul>
<li>
<p>命令 &gt;  文件 2&gt;&amp;1</p>
<ul>
<li>以覆盖的方式</li>
<li>正确和错误输出保存到同一个文件中</li>
</ul>
</li>
<li>
<p>命令 &gt;&gt;  文件  2&gt;&amp;1</p>
<ul>
<li>以追加的方式</li>
<li>正确和错误输出保存到同一个文件中</li>
</ul>
</li>
<li>
<p>命令  &amp;&gt;  文件</p>
<ul>
<li>以覆盖的方式</li>
<li>正确和错误输出都保存到同一个文件中</li>
</ul>
</li>
<li>
<p>命令  &amp;&gt;&gt; 文件</p>
<ul>
<li>以追加的方式</li>
<li>正确和错误输出都保存到同一个文件中</li>
</ul>
</li>
<li>
<p>命令  &gt;&gt;  文件1   2&gt;&gt; 文件2</p>
<ul>
<li>正确的输出追加到文件1中</li>
<li>错误的输出追加到文件2中</li>
</ul>
</li>
</ul>
</li>
<li>
<p>命令  &amp;&gt; /dev/null，不保存任何结果，只执行</p>
</li>
</ul>
</li>
<li>
<p>输入重定向</p>
<ul>
<li>
<p>wc  【选项】 【文件名】</p>
<ul>
<li>-c，统计字节数</li>
<li>-w，统计单词数</li>
<li>-l，统计行数</li>
<li>ctrl+d，结束</li>
</ul>
</li>
<li>
<p>命令 &lt;  文件，把文件作为命令输入</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>多命令顺序执行与管道符</p>
<ul>
<li>
<p>多命令顺序执行</p>
<ul>
<li>
<p>分号；，多个命令按顺序执行</p>
<ul>
<li>中间命令错误也会继续执行</li>
</ul>
</li>
<li>
<p>&amp;&amp;，逻辑与</p>
<ul>
<li>命令1正确执行后命令2才执行</li>
</ul>
</li>
<li>
<p>||，逻辑或</p>
<ul>
<li>命令1正确执行后命令2不会执行</li>
<li>命令1不正确执行，命令2才执行</li>
</ul>
</li>
</ul>
</li>
<li>
<p>管道符  |</p>
<ul>
<li>命令1   |   命令2</li>
<li>命令1的正确输出作为命令2的操作对象</li>
</ul>
</li>
<li>
<p>grep 【选项】 【文件或内容】</p>
<ul>
<li>-i，忽略大小写</li>
<li>-n，输出行号</li>
<li>-v，反向查找</li>
<li>–color=auto，搜索出的关键字用颜色显示</li>
</ul>
</li>
</ul>
</li>
<li>
<p>通配符与其他特殊符号</p>
<ul>
<li>
<p>通配符</p>
<ul>
<li>
<p>？，匹配一个任意字符</p>
</li>
<li>
<p>*，匹配0个或多个任意字符</p>
</li>
<li>
<p>【】，匹配中括号中任意一个字符</p>
<ul>
<li>【abc】，代表一定匹配一个字符</li>
</ul>
</li>
<li>
<p>【-】，匹配中括号中任意一个字符，例【a-z】</p>
</li>
<li>
<p>【^】，逻辑非，表示匹配不是中括号内的一个字符</p>
</li>
</ul>
</li>
<li>
<p>其他特殊符号</p>
<ul>
<li>‘  ’，单引号，无特殊含义</li>
<li>“  ”，除$、`和\以外无特殊含义</li>
<li><code>  </code>，反引号，系统命令，Bash会先执行</li>
<li>$()，和反引号意义一致，建议使用，反引号容易看错</li>
<li>#，shell脚本中，写在开头的表示注释</li>
<li>$，调用变量的值</li>
<li>\，转义符，跟在\后面的特殊符号会变成普通字符</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="bash-bian-liang"><a class="header-anchor" href="#Bash变量">¶</a>Bash变量</h3>
<ul>
<li>
<p>变量概述</p>
<ul>
<li>计算机内存的单元</li>
<li>其中存放的值可以改变，可以是数字、字母等</li>
<li>用于保存暂时信息</li>
</ul>
</li>
<li>
<p>规则</p>
<ul>
<li>可以由字母、数字和下划线组成</li>
<li>不能以数字开头</li>
<li>Bash中默认类型为字符串型</li>
<li>变量和值用等号连接，含空格需要单引号括起来</li>
<li>值可以使用\转义符</li>
<li>如果需要增加变量的值，变量需要用双引号包含“$变量名”或者${变量名}包含</li>
<li>若命令的结果作为值赋予变量，需用反引号或$()包含命令</li>
<li>环境变量名建议大写，便于区分</li>
</ul>
</li>
<li>
<p>分类</p>
<ul>
<li>
<p>用户自定义变量（本地变量）</p>
<ul>
<li>
<p>只在当前的Shell中生效</p>
</li>
<li>
<p>变量定义</p>
<ul>
<li>a = 123</li>
</ul>
</li>
<li>
<p>变量叠加</p>
<ul>
<li>a = &quot;$a&quot;456</li>
<li>a = ${a}789</li>
</ul>
</li>
<li>
<p>变量调用</p>
<ul>
<li>echo $a</li>
</ul>
</li>
<li>
<p>变量查看</p>
<ul>
<li>set</li>
</ul>
</li>
<li>
<p>变量删除</p>
<ul>
<li>unset  a</li>
</ul>
</li>
</ul>
</li>
<li>
<p>环境变量</p>
<ul>
<li>
<p>概述</p>
<ul>
<li>主要保存系统操作环境相关的数据</li>
<li>在当前Shell和所有子Shell当中生效</li>
<li>若写入相应配置文件，环境变量就会在所有Shell中生效</li>
<li>pstree命令可以查询当前是否存在子shell</li>
</ul>
</li>
<li>
<p>设置</p>
<ul>
<li>export  变量名 = 变量值，#申明变量</li>
<li>env，#查询环境变量</li>
<li>unset 变量名，#删除变量</li>
</ul>
</li>
<li>
<p>常见环境变量</p>
<ul>
<li>
<p>PATH</p>
<ul>
<li>系统查找命令的路径的变量</li>
<li>echo  $PATH可以查看</li>
<li>PATH = “$PATH” : /root/sh，叠加（临时）</li>
</ul>
</li>
<li>
<p>PS1</p>
<ul>
<li>
<p>定义系统提示符的变量[root@localhost ~]#</p>
</li>
<li>
<p>env无法查询，set可以查</p>
</li>
<li>
<p>详情</p>
<ul>
<li>\d，显示日期，格式为“星期  月  日”</li>
<li>\h，简写主机名</li>
<li>\t，显示24时制时间，HH:MM:SS</li>
<li>\T，显示12时制时间，格式同\t</li>
<li>\A，显示24时制时间，格式为HH:MM</li>
<li>\u，显示当前用户名</li>
<li>\w，显示当前所在目录的完整名称</li>
<li>\W，显示当前所在目录的最后一个目录</li>
<li>#，执行的第几个命令</li>
<li>$，提示符，root用户为#，普通用户$</li>
</ul>
</li>
<li>
<p>举例</p>
<ul>
<li>PS1 = ‘[\u@\t \w]$ ’</li>
<li>PS1 = '[\u@@ \h # \W]$ ’</li>
<li>PS1 = '[\u@\h  \W]$ ’</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>位置参数变量</p>
<ul>
<li>
<p>主要向脚本当中传递参数或数据，变量名和作用是固定的</p>
</li>
<li>
<p>主要参数</p>
<ul>
<li>
<p>$n</p>
<ul>
<li>n为数字，$0代表命令本身</li>
<li>$1-$9代表1-9个参数，空格区分</li>
<li>10以上需用{}，${10}</li>
</ul>
</li>
<li>
<p>$*</p>
<ul>
<li>代表命令行中所有的参数</li>
<li>把所有参数看为一个整体</li>
</ul>
</li>
<li>
<p>$@</p>
<ul>
<li>也代表命令行中所有的参数</li>
<li>但是把每个参数区分对待</li>
</ul>
</li>
<li>
<p>$#</p>
<ul>
<li>这个变量代表命令行中所有参数的个数</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>预定义变量</p>
<ul>
<li>
<p>Bash中已经定义好的变量，变量名和作用是固定的</p>
</li>
<li>
<p>主要参数</p>
<ul>
<li>
<p>$?</p>
<ul>
<li>最后一次执行命令的返回状态</li>
<li>为0表示上一个命令正确执行</li>
<li>非0，值由命令决定，表示命令执行错误</li>
</ul>
</li>
<li>
<p>$$</p>
<ul>
<li>当前进程的进程号（PID）</li>
</ul>
</li>
<li>
<p>$!</p>
<ul>
<li>后台运行的最后一个进程的进程号</li>
</ul>
</li>
<li>
<p>补充</p>
<ul>
<li>
<p>find  /root  -name  <a href="http://xxx.sh">xxx.sh</a>  &amp;</p>
<ul>
<li>使用find命令查找xxx.sh文件并放入后台执行</li>
<li>&amp;符号则为放入后台执行</li>
</ul>
</li>
<li>
<p>read [选项] [变量名]</p>
<ul>
<li>键盘输入</li>
<li>-p “提示信息”，等待输入时显示</li>
<li>-t 秒数，指定等待输入时间</li>
<li>-n 字符数，只接受指定的字符数，才会执行</li>
<li>-s，隐藏输入的数据</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="bash-yun-suan-fu"><a class="header-anchor" href="#Bash运算符">¶</a>Bash运算符</h3>
<ul>
<li>
<p>数值运算与运算符</p>
<ul>
<li>
<p>数值运算</p>
<ul>
<li>
<p>方法1</p>
<ul>
<li>
<p>declare  +/-[选项]  变量名</p>
<ul>
<li>声明变量类型</li>
<li>-，给变量设定类型属性</li>
<li>+，取消变量的类型属性</li>
<li>-i，将变量声明为整数型</li>
<li>-x，将变量声明为环境变量</li>
<li>-p，显示指定变量的声明类型</li>
</ul>
</li>
<li>
<p>例</p>
<ul>
<li>aa = 11</li>
<li>bb = 22</li>
<li>declare -i cc  = $aa + $bb</li>
</ul>
</li>
</ul>
</li>
<li>
<p>方法2</p>
<ul>
<li>
<p>expr或let工具</p>
<ul>
<li>aa = 11</li>
<li>bb = 22</li>
<li>cc = $(expr $aa + $bb)</li>
<li>注:+号两侧必须有空格</li>
</ul>
</li>
</ul>
</li>
<li>
<p>方法3</p>
<ul>
<li>
<p>$((运算式))或$[运算式]</p>
<ul>
<li>cc=$(($aa + $bb))</li>
<li>dd=$[aa + $bb]</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>运算符</p>
<ul>
<li>优先级越大越优先</li>
<li>优先级13  [+，- ]取正、负</li>
<li>优先级12，[!  ,  ~]，逻辑非、按位补码</li>
<li>优先级11，[* ，/，%]，乘除，取模</li>
<li>优先级10，[+ , -]，加减</li>
<li>优先级9，[&lt;&lt; , &gt;&gt;]，按位左移，按位右移</li>
<li>优先级8，[&lt;= , &gt;= , &lt; , &gt;]，大于小于，大于等于</li>
<li>优先级7，[== ， != ]，等于，不等于</li>
<li>优先级6，&amp; 按位与</li>
<li>优先级5，^ 按位异或</li>
<li>优先级4，|  按位或</li>
<li>优先级3，&amp;&amp;逻辑与</li>
<li>优先级2，||逻辑或</li>
<li>优先级1，[=，+=，-=， &lt;&lt;= 等]，赋值，运算赋值</li>
</ul>
</li>
</ul>
</li>
<li>
<p>变量测试与内容替换</p>
<ul>
<li>
<p>x = ${y - 新值}</p>
<ul>
<li>y没设置，则x=新值</li>
<li>y为空，则x为空</li>
<li>y有值，则x=$y</li>
</ul>
</li>
<li>
<p>x = ${y : 新值}</p>
<ul>
<li>y没设置，则x=新值</li>
<li>y为空，则x=新值</li>
<li>y有值，则x=$y</li>
</ul>
</li>
<li>
<p>x = ${y + 新值}</p>
<ul>
<li>y没设置，则x为空</li>
<li>y为空，则x=新值</li>
<li>y有值，则x=新值</li>
</ul>
</li>
<li>
<p>x = ${y :+ 新值}</p>
<ul>
<li>y没设置，则x为空</li>
<li>y为空，则x为空</li>
<li>y有值，则x=新值</li>
</ul>
</li>
<li>
<p>x = ${y = 新值}</p>
<ul>
<li>y没设置，则x=新值，y=新值</li>
<li>y为空，则x为空，y不变</li>
<li>y有值，则x=$y，y不变</li>
</ul>
</li>
<li>
<p>x = ${y := 新值}</p>
<ul>
<li>y没设置，则x=新值，y=新值</li>
<li>y为空，则x=新值，y=新值</li>
<li>y有值，则x=$y，y不变</li>
</ul>
</li>
<li>
<p>x = ${y ? 新值}</p>
<ul>
<li>y没设置，则新值输出到标准错误输出（屏幕）</li>
<li>y为空，则x为空</li>
<li>y有值，则x=$y</li>
</ul>
</li>
<li>
<p>x = ${y :? 新值}</p>
<ul>
<li>y没设置，则新值输出到标准错误输出</li>
<li>y为空，则新值输出到标准错误输出</li>
<li>y有值，则x=$y</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="huan-jing-bian-liang-pei-zhi-wen-jian"><a class="header-anchor" href="#环境变量配置文件">¶</a>环境变量配置文件</h3>
<ul>
<li>
<p>简介</p>
<ul>
<li>
<p>source 配置文件或 . 配置文件(有空格)</p>
<ul>
<li>强制生效配置文件</li>
</ul>
</li>
<li>
<p>主要是对系统操作环境生效的系统默认环境变量</p>
<ul>
<li>PATH</li>
<li>HISTSIZE</li>
<li>PS1</li>
<li>HOSTNAME</li>
</ul>
</li>
<li>
<p>环境配置文件</p>
<ul>
<li>
<p>1、/etc/profile</p>
</li>
<li>
<p>2、~/.bash_profile，只对当前用户生效</p>
</li>
<li>
<p>3、~/.bashrc，只对当前用户生效</p>
</li>
<li>
<p>4、/etc/bashrc</p>
</li>
<li>
<p>5、/etc/profile.d/*.sh</p>
</li>
<li>
<p>读取顺序</p>
<ul>
<li>1234，然后读取命令提示符</li>
<li>12345，然后读取具体脚本</li>
<li>15，<a href="http://xn--lang-zc1gqlr55op05b.sh">然后读取lang.sh</a>，再读取/etc/sysconfig/i18n</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>作用</p>
<ul>
<li>
<p>/etc/profile</p>
<ul>
<li>USER、LOGNAME、MAIL</li>
<li>PATH、HOSTNAME、HISTNAME</li>
<li>umask</li>
<li>调用/etc/profile.d/*.sh文件</li>
</ul>
</li>
<li>
<p>~/.bash_profile</p>
<ul>
<li>调用~/.bashrc文件</li>
<li>再PATH值后面加入家目录下的/bin这个目录</li>
</ul>
</li>
<li>
<p>~/.bashrc</p>
<ul>
<li>系统别名定义</li>
<li>只针对当前用户</li>
</ul>
</li>
<li>
<p>/etc/bashrc</p>
<ul>
<li>PS1变量、PATH变量</li>
<li>umask</li>
<li>调用/etc/profile.d/*.sh文件</li>
<li>以上定义和调用针对不输入密码登录的情况</li>
</ul>
</li>
</ul>
</li>
<li>
<p>其他配置文件和登录信息</p>
<ul>
<li>
<p>注销时生效，~/.bash_logout</p>
</li>
<li>
<p>历史命令，~/bash_history</p>
</li>
<li>
<p>Shell本地登录信息，/etc/issue</p>
<ul>
<li>\d，系统日期</li>
<li>\s，显示操作系统名称</li>
<li>\l，显示登录终端号</li>
<li>\m，显示硬件体系结构</li>
<li>\n，显示主机名</li>
<li>\o，显示域名</li>
<li>\r，显示内核版本</li>
<li>\t，显示当前系统时间</li>
<li>\u，显示当前登录用户序列号</li>
</ul>
</li>
<li>
<p>远程终端登录信息，/etc/issue.net</p>
<ul>
<li>issue转义符不支持，只支持纯文本</li>
<li>是否显示由/etc/ssh/sshd_config决定</li>
<li>加入“Banner /etc/issue.net”行重启ssh服务才行</li>
</ul>
</li>
<li>
<p>登录欢迎信息，/etc/motd</p>
<ul>
<li>本地、远程登录都可以</li>
<li>但是需要登录完成后才显示</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="zheng-ze-biao-da-shi"><a class="header-anchor" href="#正则表达式">¶</a>正则表达式</h3>
<ul>
<li>
<p>概念和比较</p>
<ul>
<li>用来在文件中匹配符合条件的字符串</li>
<li>正则是包含匹配</li>
<li>grep、awk、sed等命令可以支持</li>
<li>通配符用来匹配符合条件的文件名，完全匹配</li>
<li>ls、find、cp等命令不支持</li>
</ul>
</li>
<li>
<p>基础元字符</p>
<ul>
<li>
<p>*，前一个字符匹配0或任意多次</p>
<ul>
<li>grep “aa*”  test.txt，匹配至少有一个a的行</li>
<li>grep “a*” test.txt，匹配所有行，包括空白行</li>
</ul>
</li>
<li>
<p>.  ，匹配除了换行符外任意一个字符</p>
</li>
<li>
<p><sup>，匹配行首，</sup>a就会匹配以a开头的行</p>
</li>
<li>
<p>$，匹配行尾，a$</p>
</li>
<li>
<p>[]，匹配括号中任意一个字符，只匹配一个</p>
</li>
<li>
<p>[^]，匹配除括号中字符外任意一个字符</p>
<ul>
<li><sup>[</sup>a-z]，匹配不用小写字母开头的行</li>
<li><sup>[</sup>a-zA-Z]，匹配不用字母开头的行</li>
</ul>
</li>
<li>
<p>\，转义符</p>
</li>
<li>
<p>\ {n}，表示其前面字符恰好出现n次</p>
<ul>
<li>[0-9]{4}，匹配4位数字</li>
<li>[1][3-8][0-9]{9}，匹配手机号</li>
</ul>
</li>
<li>
<p>\ {n , }，表示其前面字符出现不小于n次</p>
<ul>
<li>[0-9]{2,}，表示两位及以上的数字</li>
</ul>
</li>
<li>
<p>\ {n, m}，表示其前面字符至少出现n次，最多m次</p>
<ul>
<li>[a-z]{6,8}，匹配6到8位的小写字母</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="zi-fu-jie-qu"><a class="header-anchor" href="#字符截取">¶</a>字符截取</h3>
<ul>
<li>
<p>cut</p>
<ul>
<li>
<p>cut [选项]  文件名</p>
<ul>
<li>-f  列号，提取第几列</li>
<li>-d  分隔符，指定分隔符分割列</li>
<li>cut -d “:” -f 1, 3 /etc/passwd，以:为间隔提取第1，3列</li>
<li>不支持空格作为分隔符，不具体，分隔符必须具体</li>
</ul>
</li>
</ul>
</li>
<li>
<p>printf</p>
<ul>
<li>
<p>printf  ’输出类型  输出格式‘  输出内容</p>
<ul>
<li>
<p>输出类型</p>
<ul>
<li>%ns，输出字符串，n指几个字符</li>
<li>%ni，输出整数，n指几个数字</li>
<li>%<a href="http://m.nf">m.nf</a>，输出浮点数，分别指整数位数和小数位数，%8.2f，指8位数，2位小数，6位整数</li>
</ul>
</li>
<li>
<p>输出格式</p>
<ul>
<li>\a，输出警告声音</li>
<li>\b，输出退格键</li>
<li>\f，清除屏幕</li>
<li>\n，换行</li>
<li>\r，回车</li>
<li>\t，水平输出退格键（TAB）</li>
<li>\v，垂直输出退格键（TAB）</li>
</ul>
</li>
<li>
<p>printf后不能直接跟文件，或通过管道符跟文件</p>
</li>
<li>
<p>只能printf  ’%s‘ $(cat 123.txt)，这样输入</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>awk</p>
<ul>
<li>
<p>输出中支持print和printf</p>
<ul>
<li>printf不会自动换行，print会，但Linux不含print</li>
</ul>
</li>
<li>
<p>awk ’条件1 {动作1} 条件2{动作2}…’ 文件名</p>
<ul>
<li>
<p>条件</p>
<ul>
<li>一般使用关系表达式作为条件</li>
<li>x&gt;10,x&lt;=10等</li>
</ul>
</li>
<li>
<p>动作</p>
<ul>
<li>格式化输出</li>
<li>流程控制语句</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>sed</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之Vim</title>
    <url>/2021/05/06/Linux/Linux%E4%B9%8BVim/</url>
    <content><![CDATA[<h1 id="linux-zhi-vim-bian-ji-qi">Linux之Vim编辑器</h1>
<h3 id="ji-ben-gai-nian"><a class="header-anchor" href="#基本概念">¶</a>基本概念</h3>
<ul>
<li>
<p>全屏幕文本编辑器，作用是建立、编辑、显示文本文件</p>
</li>
<li>
<p>Vim没有菜单，只有命令</p>
</li>
<li>
<p>模式</p>
<ul>
<li>命令模式，vim进入默认状态</li>
<li>插入模式，命令模式下按i，a，o进入</li>
<li>编辑模式，命令模式下用：进入</li>
</ul>
</li>
</ul>
<h3 id="chang-yong-cao-zuo"><a class="header-anchor" href="#常用操作">¶</a>常用操作</h3>
<ul>
<li>
<p>插入模式命令</p>
<ul>
<li>a，光标所在字符后插入</li>
<li>A，光标所在行尾插入</li>
<li>i，光标所在字符前插入</li>
<li>I，光标所在行首插入</li>
<li>o，光标下插入新行</li>
<li>O，光标上插入新行</li>
</ul>
</li>
<li>
<p>定位命令</p>
<ul>
<li>：set nu，设置行号</li>
<li>：set nonu，取消行号</li>
<li>gg到第一行，G到最后一行</li>
<li>nG，到第n行</li>
<li>：n，到第n行</li>
<li>$，移至行尾</li>
<li>0，移至行首</li>
</ul>
</li>
<li>
<p>删除命令</p>
<ul>
<li>x，删除光标所在字符</li>
<li>nx，删除光标所在处后n个字符</li>
<li>dd，删除光标所在行，ndd，删除n行</li>
<li>dG，删除光标所在行到文件末尾内容</li>
<li>D删除光标所在处到行尾内容</li>
<li>：n1，n2d，删除指定范围的行</li>
</ul>
</li>
<li>
<p>复制、剪切命令</p>
<ul>
<li>yy，复制当前行</li>
<li>nyy，复制当前行以下n行</li>
<li>dd，剪切当前行</li>
<li>ndd，剪切当前行以下n行</li>
<li>p，P，粘贴在当前光标所在行下或行上</li>
</ul>
</li>
<li>
<p>替换、取消命令</p>
<ul>
<li>r，取代光标所在处字符</li>
<li>R，从光标处开始替换字符，按Esc结束</li>
<li>u，取消上一步操作</li>
</ul>
</li>
<li>
<p>搜索、搜索替换命令</p>
<ul>
<li>
<p>/XXX，搜索指定字符，搜索忽略大小写：set ic</p>
</li>
<li>
<p>n，搜索指定字符串的下一个出现位置</p>
</li>
<li>
<p>：%s/old/new/g，全文替换指定字符串</p>
</li>
<li>
<p>n1，n2s/old/new/g，在一定范围内替换指定字符串</p>
</li>
<li>
<p>注意</p>
<ul>
<li>s代表指定行，不指定代表所有行</li>
<li>/g代表不询问，/c表示询问</li>
</ul>
</li>
</ul>
</li>
<li>
<p>保存、退出命令</p>
<ul>
<li>：w，保存修改</li>
<li>：w 【文件名】，另存为指定文件</li>
<li>：wq，保存并退出</li>
<li>ZZ，保存修改并退出</li>
<li>：q！，不保存修改退出</li>
<li>：wq！，保存修改并退出（所有者和root用户可使用）</li>
</ul>
</li>
</ul>
<h3 id="shi-yong-ji-qiao"><a class="header-anchor" href="#使用技巧">¶</a>使用技巧</h3>
<ul>
<li>
<p>：r  【文件名】，导入文件内容 到光标处</p>
</li>
<li>
<p>：！命令，执行对应命令</p>
</li>
<li>
<p>：r ！命令，导入命令执行结果</p>
</li>
<li>
<p>map 快捷键  触发命令，定义快捷键</p>
<ul>
<li>快捷键需要Ctrl+v+对应键定义</li>
<li>触发命令：I#<ESC>，注释行</ESC></li>
</ul>
</li>
<li>
<p>：n1，n2s/^/#/g，连续行注释</p>
<ul>
<li>^代表匹配开头</li>
<li>不写^中间的#也会被注释</li>
</ul>
</li>
<li>
<p>：ab  old   new，替换</p>
<ul>
<li>ab为固定格式</li>
<li>old和new为指定字符串</li>
<li>当你在文件里输入old字符串回车或空格后即会替换</li>
</ul>
</li>
<li>
<p>若需要快捷操作永久生效，需要到用户家目录下的.vimrc文件下进行输入和保存，不需要写冒号</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux进阶命令</title>
    <url>/2021/05/06/Linux/Linux%E8%BF%9B%E9%98%B6%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="linux-jin-jie-ming-ling">Linux进阶命令</h1>
<h2 id="guan-ji-zhong-qi-ming-ling"><a class="header-anchor" href="#关机重启命令">¶</a>关机重启命令</h2>
<h3 id="shutdown"><a class="header-anchor" href="#shutdown">¶</a>shutdown</h3>
<ul>
<li>
<p>语法：shutdown 【选项】 时间</p>
</li>
<li>
<p>如：shutdown -h 【（now）/（20：30）】</p>
</li>
<li>
<p>常用参数</p>
<ul>
<li>-c，取消设置的定时关机</li>
<li>-h，关机</li>
<li>-r，重启</li>
</ul>
</li>
</ul>
<h3 id="qi-ta-guan-ji-ming-ling"><a class="header-anchor" href="#其他关机命令">¶</a>其他关机命令</h3>
<ul>
<li>halt</li>
<li>poweroff</li>
<li>init 0</li>
</ul>
<h3 id="qi-ta-zhong-qi-ming-ling"><a class="header-anchor" href="#其他重启命令">¶</a>其他重启命令</h3>
<ul>
<li>reboot</li>
<li>init 6</li>
</ul>
<h3 id="bu-chong-xi-tong-yun-xing-ji-bie-init-ming-ling-diao-yong"><a class="header-anchor" href="#补充：系统运行级别，init命令调用">¶</a>补充：系统运行级别，init命令调用</h3>
<ul>
<li>0，关机</li>
<li>1，单用户（启用最小服务）</li>
<li>2，不完全多用户，不含NFS服务</li>
<li>3，完全多用户</li>
<li>4，未分配</li>
<li>5，图形界面</li>
<li>6，重启</li>
<li>cat /etc/inittab可以查看</li>
<li>runlevel命令也可查看当前及上一次运行级别</li>
</ul>
<h3 id="logout"><a class="header-anchor" href="#logout">¶</a>logout</h3>
<ul>
<li>退出登录</li>
</ul>
<h2 id="wang-luo-ming-ling"><a class="header-anchor" href="#网络命令">¶</a>网络命令</h2>
<h3 id="write"><a class="header-anchor" href="#write">¶</a>write</h3>
<ul>
<li>所在路径/usr/bin/write</li>
<li>执行权限：所有用户</li>
<li>功能：给用户发信息，以Ctrl+D保存结束</li>
<li>语法：write 【用户名】</li>
<li>注：只能是在线用户间发送</li>
</ul>
<h3 id="wall"><a class="header-anchor" href="#wall">¶</a>wall</h3>
<ul>
<li>原意write all，所在路径/usr/bin/wall</li>
<li>执行权限：所有用户</li>
<li>功能：给所有用户发广播信息</li>
<li>语法：wall 【信息】</li>
<li>注：所有在线用户都能收到，包括本机用户</li>
</ul>
<h3 id="ping"><a class="header-anchor" href="#ping">¶</a>ping</h3>
<ul>
<li>所在路径/bin/ping</li>
<li>执行权限：所有用户</li>
<li>功能：测试网络连通性</li>
<li>语法：ping 【IP地址】</li>
<li>-c，指定发送次数</li>
</ul>
<h3 id="ifconfig"><a class="header-anchor" href="#ifconfig">¶</a>ifconfig</h3>
<ul>
<li>原意interface configure</li>
<li>所在路径/sbin/ifconfig</li>
<li>执行权限：root用户</li>
<li>功能：查看和设置网卡信息</li>
<li>语法：ifconfig 【网卡名称】 【IP地址】</li>
<li>注：此命令是临时设置的网络地址</li>
</ul>
<h3 id="mail"><a class="header-anchor" href="#mail">¶</a>mail</h3>
<ul>
<li>
<p>所在路径/bin/mail</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：查看发送电子邮件</p>
</li>
<li>
<p>语法：mail 【用户名】</p>
</li>
<li>
<p>Ctrl+D键结束内容发送</p>
</li>
<li>
<p>操作</p>
<ul>
<li>mail界面下，help可以查看帮助信息</li>
<li>输入邮件序号可以查看邮件</li>
<li>h键查看列表，d+序号删除，q键退出</li>
</ul>
</li>
</ul>
<h3 id="last"><a class="header-anchor" href="#last">¶</a>last</h3>
<ul>
<li>所在路径/usr/bin/last</li>
<li>执行权限：所有用户</li>
<li>功能：列出过去登录系统的用户信息</li>
<li>语法：last</li>
<li>注：lastlog命令可以看所有用户最后登录时间</li>
</ul>
<h3 id="traceroute"><a class="header-anchor" href="#traceroute">¶</a>traceroute</h3>
<ul>
<li>所在路径/bin/traceroute</li>
<li>执行权限：所有用户</li>
<li>功能：显示数据包到主机间的路径</li>
<li>语法：traceroute  【IP地址】</li>
</ul>
<h3 id="netstat"><a class="header-anchor" href="#netstat">¶</a>netstat</h3>
<ul>
<li>
<p>所在路径/bin/netstat</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：显示网络相关信息</p>
</li>
<li>
<p>语法：netstat 【选项】</p>
</li>
<li>
<p>常用参数</p>
<ul>
<li>-t，TCP协议</li>
<li>-u，UDP协议</li>
<li>-l，监听</li>
<li>-r，路由</li>
<li>-n，显示IP地址和端口</li>
<li>-a，查看所有</li>
</ul>
</li>
<li>
<p>常见用法</p>
<ul>
<li>netstat -tlun，查看本机监听端口</li>
<li>netstat -an，查看本机所有网络连接</li>
<li>netstat -rn，查看本机路由表</li>
</ul>
</li>
</ul>
<h3 id="setup"><a class="header-anchor" href="#setup">¶</a>setup</h3>
<ul>
<li>
<p>所在路径/usr/bin/setup</p>
</li>
<li>
<p>执行权限：root用户</p>
</li>
<li>
<p>功能：配置网络</p>
</li>
<li>
<p>语法：setup</p>
</li>
<li>
<p>注意</p>
<ul>
<li>只有redhat系统存在的命令</li>
<li>配置完后需要service network restart</li>
<li>此命令永久生效</li>
</ul>
</li>
</ul>
<h3 id="mount"><a class="header-anchor" href="#mount">¶</a>mount</h3>
<ul>
<li>
<p>所在路径/bin/mount</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：挂载命令</p>
</li>
<li>
<p>语法：mount 【-t 文件系统】【设备文件名】【挂载点】</p>
</li>
<li>
<p>mount -t   iso9660   /dev/sr0(或/dev/cdrom)   /mnt/cdrom</p>
</li>
<li>
<p>注意：</p>
<ul>
<li>umount /dev/sr0，取消挂载</li>
<li>-t iso9660可以省略</li>
<li>sr0和cdrom是一个文件，都是默认好的，不需要修改</li>
<li>取消挂载不能在挂载目录下进行</li>
</ul>
</li>
</ul>
<h2 id="ya-suo-jie-ya-ming-ling"><a class="header-anchor" href="#压缩解压命令">¶</a>压缩解压命令</h2>
<h3 id="gzip"><a class="header-anchor" href="#gzip">¶</a>gzip</h3>
<ul>
<li>所在路径/bin/gzip</li>
<li>执行权限：所有用户</li>
<li>功能：压缩文件，压缩后格式为.gz</li>
<li>语法：gzip 【文件】</li>
</ul>
<h3 id="gunzip"><a class="header-anchor" href="#gunzip">¶</a>gunzip</h3>
<ul>
<li>所在路径/bin/gunzip</li>
<li>执行权限：所有用户</li>
<li>功能：解压缩格式为.gz的文件</li>
<li>语法：gunzip 【文件】</li>
<li>gzip -d 【文件】也可以解压缩</li>
<li>注：Linux只能压缩文件，压缩后源文件会消失</li>
</ul>
<h3 id="tar"><a class="header-anchor" href="#tar">¶</a>tar</h3>
<ul>
<li>
<p>所在路径/bin/tar</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：打包目录，打包后格式为.tar.gz</p>
</li>
<li>
<p>语法：tar 【选项】【压缩后文件名】【目录】</p>
</li>
<li>
<p>常用参数</p>
<ul>
<li>-c，打包</li>
<li>-v，显示详细信息</li>
<li>-f，指定文件名</li>
<li>-z，打包同时压缩/解压缩</li>
<li>-x，解包</li>
<li>注：-f一定要写在最后，不然-f后的参数会被作为文件名</li>
</ul>
</li>
</ul>
<h3 id="zip"><a class="header-anchor" href="#zip">¶</a>zip</h3>
<ul>
<li>所在路径/usr/bin/zip</li>
<li>执行权限：所有用户</li>
<li>功能：压缩文件或目录，格式为.zip</li>
<li>语法：zip 【选项】【压缩后文件名】【文件/目录】</li>
<li>-r，压缩目录</li>
</ul>
<h3 id="unzip"><a class="header-anchor" href="#unzip">¶</a>unzip</h3>
<ul>
<li>所在路径/usr/bin/unzip</li>
<li>执行权限：所有用户</li>
<li>功能：解压缩格式为.zip的压缩文件</li>
<li>语法：unzipzip 【压缩文件】</li>
</ul>
<h3 id="bzip-2"><a class="header-anchor" href="#bzip2">¶</a>bzip2</h3>
<ul>
<li>所在路径/usr/bin/bzip2</li>
<li>执行权限：所有用户</li>
<li>功能：压缩文件,格式为.bz2</li>
<li>语法：bzip2 【选项】【文件】</li>
<li>-k，压缩文件后保留原文件</li>
<li>注：tar -cjf 压缩文件为.tar.gz2</li>
</ul>
<h3 id="bunzip-2"><a class="header-anchor" href="#bunzip2">¶</a>bunzip2</h3>
<ul>
<li>所在路径/usr/bin/bunzip2</li>
<li>执行权限：所有用户</li>
<li>功能：解压缩.bz2的压缩文件</li>
<li>语法：bunzip2 【选项】【压缩文件】</li>
<li>-k，解压缩后保留原文件</li>
<li>注：tar -xjf 解压.tar.bz2文件</li>
</ul>
<h2 id="wen-jian-sou-suo-ming-ling"><a class="header-anchor" href="#文件搜索命令">¶</a>文件搜索命令</h2>
<h3 id="find"><a class="header-anchor" href="#find">¶</a>find</h3>
<ul>
<li>
<p>原意find，所在路径/bin/find</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：查找和搜索文件</p>
</li>
<li>
<p>语法：find  【搜索范围】 【匹配条件】</p>
</li>
<li>
<p>常用参数</p>
<ul>
<li>
<p>find /etc -name init，目录/etc中查找文件init</p>
<ul>
<li>不会搜索出包含init的文件，只会显示为init名的文件</li>
<li>需要模糊搜索需要用*通配符或？单个字符匹配</li>
<li>不区分大小写需要使用-iname</li>
</ul>
</li>
<li>
<p>find / -size +204800，根目录下查找大于100MB的文件</p>
<ul>
<li>减号表示小于多大的文件</li>
<li>数字的单位是数据块，一个是512字节</li>
</ul>
</li>
<li>
<p>find /home -user test，根目录下查找所有者为test的文件</p>
</li>
<li>
<p>find /etc -cmin -5，/etc下查找5分钟内被修改过属性的文件和目录</p>
<ul>
<li>-amin，访问时间access</li>
<li>-cmin，文件属性change</li>
<li>-mmin，文件内容modify</li>
<li>加号表示超过多长时间</li>
</ul>
</li>
<li>
<p>-a，两个条件同时满足</p>
<ul>
<li>find /etc -size +163840 -a -size -204800</li>
<li>/etc下查找大于80MB小于100MB的文件</li>
<li>-o，两个条件满足一个即可</li>
</ul>
</li>
<li>
<p>-exec  {} \ ;，对搜索结果执行操作</p>
<ul>
<li>find /etc -name test -exec ls -l {} ;</li>
<li>在/etc下查找test文件并显示其详细信息</li>
<li>-ok {} \ ;，对执行的操作需要逐一确认是否执行</li>
<li>{}表示对查找结果进行整合，\为转义符，;为结束</li>
</ul>
</li>
<li>
<p>-type，根据文件类型查找</p>
<ul>
<li>f，文件</li>
<li>d，目录</li>
<li>l，软链接文件</li>
</ul>
</li>
<li>
<p>-inum，根据i节点进行查找</p>
</li>
</ul>
</li>
</ul>
<h3 id="qi-ta-sou-suo-ming-ling"><a class="header-anchor" href="#其他搜索命令">¶</a>其他搜索命令</h3>
<ul>
<li>
<p>locate</p>
<ul>
<li>
<p>原意locate，所在路径/usr/bin/locate</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：在文件资料库中查找文件</p>
</li>
<li>
<p>语法：locate 【文件名】</p>
</li>
<li>
<p>注意</p>
<ul>
<li>更新时间较长，无法查找实时新文件</li>
<li>除非root用户下updatedb更新资料库</li>
<li>/tmp这种临时目录下的文件不在资料库收录范围</li>
</ul>
</li>
<li>
<p>-i，不区分大小写</p>
</li>
</ul>
</li>
<li>
<p>which</p>
<ul>
<li>原意which，所在路径/usr/bin/which</li>
<li>执行权限：所有用户</li>
<li>功能：搜索命令所在目录及别名信息</li>
<li>语法：which  【命令】</li>
</ul>
</li>
<li>
<p>whereis</p>
<ul>
<li>原意whereis，所在路径/usr/bin/whereis</li>
<li>执行权限：所有用户</li>
<li>功能：搜索命令所在目录及帮助文档路径</li>
<li>语法：whiereis  【命令】</li>
</ul>
</li>
<li>
<p>grep</p>
<ul>
<li>
<p>原意grep，所在路径/usr/bin/grep</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：在文件中搜素字符匹配的行并输出</p>
</li>
<li>
<p>语法：grep -iv 【指定字符】【文件】</p>
<ul>
<li>如：grep mysql /root/install.log</li>
</ul>
</li>
<li>
<p>参数</p>
<ul>
<li>
<p>-i，不区分大小写</p>
</li>
<li>
<p>-v，排除指定字串</p>
<ul>
<li>如果只排除行首有此字符的行，需要在字符前加^</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础命令</title>
    <url>/2021/05/06/Linux/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="linux-ji-chu-ming-ling">Linux基础命令</h1>
<h2 id="mu-lu-chu-li-ming-ling"><a class="header-anchor" href="#目录处理命令">¶</a>目录处理命令</h2>
<h3 id="ls"><a class="header-anchor" href="#ls">¶</a>ls</h3>
<ul>
<li>
<p>原意list，所在路径/bin/ls</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：显示目录文件</p>
</li>
<li>
<p>语法：ls  【选项】  【目录或文件】</p>
</li>
<li>
<p>选项参数</p>
<ul>
<li>-a，显示所有文件，包括隐藏文件</li>
<li>-l，详细显示信息</li>
<li>-d，查看目录属性（不显示文件信息）</li>
<li>-h，文件大小显示增加可读性</li>
<li>-i，查看文件i节点</li>
</ul>
</li>
</ul>
<h3 id="mkdir"><a class="header-anchor" href="#mkdir">¶</a>mkdir</h3>
<ul>
<li>
<p>原意make directories，路径/bin/mkdir</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：创建新目录</p>
</li>
<li>
<p>语法：mkdir 【选项】 【目录名1】【目录名2】</p>
</li>
<li>
<p>常用参数</p>
<ul>
<li>-p，递归创建</li>
</ul>
</li>
</ul>
<h3 id="cd"><a class="header-anchor" href="#cd">¶</a>cd</h3>
<ul>
<li>
<p>原意 change directory，shell内置命令</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：切换目录</p>
</li>
<li>
<p>语法：cd 【目录】</p>
</li>
<li>
<p>常用参数</p>
<ul>
<li>…回到上一级目录</li>
<li>-，回到上个所在目录</li>
</ul>
</li>
</ul>
<h3 id="pwd"><a class="header-anchor" href="#pwd">¶</a>pwd</h3>
<ul>
<li>原意print working directory，所在路径/bin/pwd</li>
<li>执行权限：所有用户</li>
<li>功能：显示当前目录路径</li>
<li>语法：pwd</li>
</ul>
<h3 id="rmdir"><a class="header-anchor" href="#rmdir">¶</a>rmdir</h3>
<ul>
<li>原意remove empty directories，路径/bin/rmdir</li>
<li>执行权限：所有用户</li>
<li>功能：删除空目录</li>
<li>语法：rmdir  【目录名】</li>
</ul>
<h3 id="cp"><a class="header-anchor" href="#cp">¶</a>cp</h3>
<ul>
<li>
<p>原意copy，路径/bin/cp</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：复制文件或目录</p>
</li>
<li>
<p>语法：cp 【选项】 【原文件/目录】【目标目录】</p>
</li>
<li>
<p>常用参数</p>
<ul>
<li>-p，保留文件属性复制</li>
<li>-r，复制目录</li>
</ul>
</li>
<li>
<p>注意：可以同时对多个文件或目录进行复制</p>
</li>
</ul>
<h3 id="mv"><a class="header-anchor" href="#mv">¶</a>mv</h3>
<ul>
<li>原意move，路径/bin/mv</li>
<li>执行权限：所有用户</li>
<li>功能：剪切文件、改名</li>
<li>语法：mv【选项】 【原文件/目录】【目标目录】</li>
<li>注意：可以同时对多个文件或目录进行剪切</li>
</ul>
<h3 id="rm"><a class="header-anchor" href="#rm">¶</a>rm</h3>
<ul>
<li>
<p>原意rm，路径/bin/rm</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：删除文件或目录</p>
</li>
<li>
<p>语法：rm【选项】 【原文件/目录】</p>
</li>
<li>
<p>常用参数</p>
<ul>
<li>-r，删除目录</li>
<li>-f，强制执行</li>
</ul>
</li>
</ul>
<h2 id="wen-jian-chu-li-ming-ling"><a class="header-anchor" href="#文件处理命令">¶</a>文件处理命令</h2>
<h3 id="touch"><a class="header-anchor" href="#touch">¶</a>touch</h3>
<ul>
<li>原意touch，路径/bin/touch</li>
<li>执行权限：所有用户</li>
<li>功能：创建空文件</li>
<li>语法：touch 【文件名】</li>
</ul>
<h3 id="cat"><a class="header-anchor" href="#cat">¶</a>cat</h3>
<ul>
<li>
<p>原意cat，路径/bin/cat</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：显示文件内容</p>
</li>
<li>
<p>语法：cat 【文件名】</p>
</li>
<li>
<p>常用参数</p>
<ul>
<li>-n，显示行号</li>
</ul>
</li>
<li>
<p>注意tac为反向显示（参考学习）</p>
</li>
</ul>
<h3 id="more"><a class="header-anchor" href="#more">¶</a>more</h3>
<ul>
<li>
<p>原意more，路径/bin/more</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：分页显示文件内容</p>
</li>
<li>
<p>语法：more 【文件名】</p>
</li>
<li>
<p>操作</p>
<ul>
<li>空格或f，翻后页</li>
<li>B或b，往前翻页</li>
<li>回车，换行</li>
<li>q或Q，退出</li>
</ul>
</li>
</ul>
<h3 id="less"><a class="header-anchor" href="#less">¶</a>less</h3>
<ul>
<li>
<p>原意less，路径/usr/bin/less</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：分页显示文件内容（可搜索）</p>
</li>
<li>
<p>语法：less 【文件名】</p>
</li>
<li>
<p>操作</p>
<ul>
<li>空格或page down，翻后页</li>
<li>page up，往前翻页</li>
<li>回车，换行</li>
<li>q或Q，退出</li>
<li>/XXX，可搜索文件中相关内容，n向下查找，N反向查找</li>
</ul>
</li>
</ul>
<h3 id="head"><a class="header-anchor" href="#head">¶</a>head</h3>
<ul>
<li>
<p>原意head，路径/usr/bin/head</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：显示文件前面十行内容</p>
</li>
<li>
<p>语法：head 【文件名】</p>
</li>
<li>
<p>操作</p>
<ul>
<li>-n，显示指定行数</li>
</ul>
</li>
</ul>
<h3 id="tail"><a class="header-anchor" href="#tail">¶</a>tail</h3>
<ul>
<li>
<p>原意tail，路径/usr/bin/tail</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：显示文件后面十行内容</p>
</li>
<li>
<p>语法：tail 【文件名】</p>
</li>
<li>
<p>操作</p>
<ul>
<li>-n，显示指定行数</li>
<li>-f，动态显示文件末尾内容</li>
</ul>
</li>
</ul>
<h2 id="quan-xian-guan-li-ming-ling"><a class="header-anchor" href="#权限管理命令">¶</a>权限管理命令</h2>
<h3 id="chmod"><a class="header-anchor" href="#chmod">¶</a>chmod</h3>
<ul>
<li>
<p>原意change the permissions mode of a file</p>
</li>
<li>
<p>路径/bin/chmod</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：改变文件或目录权限</p>
</li>
<li>
<p>语法</p>
<ul>
<li>
<p>chmod  +  【{ugoa} {±=} {rwx}】【文件或目录】</p>
<p>u：代表所有者<br>
g：代表所属组<br>
o：代表其他人<br>
a：代表所有人</p>
</li>
<li>
<p>chmod 【mode = 421】【文件或目录】</p>
</li>
</ul>
</li>
<li>
<p>常用参数</p>
<ul>
<li>-R，递归修改</li>
</ul>
</li>
</ul>
<h3 id="qi-ta-quan-xian-guan-li-ming-ling"><a class="header-anchor" href="#其他权限管理命令">¶</a>其他权限管理命令</h3>
<ul>
<li>
<p>chown</p>
<ul>
<li>
<p>原意change file ownership</p>
</li>
<li>
<p>路径/bin/chown</p>
</li>
<li>
<p>执行权限：root用户</p>
</li>
<li>
<p>功能：改变文件或目录的所有者（用户存在）</p>
</li>
<li>
<p>语法</p>
<ul>
<li>chown  【用户】 【文件或目录】</li>
</ul>
</li>
<li>
<p>常用参数</p>
<ul>
<li>-R，递归修改</li>
</ul>
</li>
</ul>
</li>
<li>
<p>chgrp</p>
<ul>
<li>
<p>原意change file group ownership</p>
</li>
<li>
<p>路径/bin/chgrp</p>
</li>
<li>
<p>执行权限：root用户</p>
</li>
<li>
<p>功能：改变文件或目录的所属组</p>
</li>
<li>
<p>语法</p>
<ul>
<li>chgrp  【用户组】 【文件或目录】</li>
</ul>
</li>
</ul>
</li>
<li>
<p>umask</p>
<ul>
<li>
<p>原意the user file-creation mask</p>
</li>
<li>
<p>shell内置命令</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：显示、设置文件的缺省权限</p>
</li>
<li>
<p>语法</p>
<ul>
<li>umask  【-S】 【数值】</li>
<li>以rwx形式显示新建文件的缺省权限</li>
</ul>
</li>
<li>
<p>注意</p>
<ul>
<li>针对目录默认权限为755，文件权限为644</li>
<li>umask结果为0022，umask -S结果为755</li>
<li>022是需要和777做与运算的，也就是755</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="quan-xian-hua-fen-shuo-ming"><a class="header-anchor" href="#权限划分说明">¶</a>权限划分说明</h3>
<ul>
<li>
<p>r可读–4，w可写–2，x可执行–1</p>
</li>
<li>
<p>rwxrw-r–：对应二进制和764</p>
</li>
<li>
<p>对文件来说</p>
<ul>
<li>r：可以查看文件内容</li>
<li>w：可以修改文件内容</li>
<li>x：可以执行文件</li>
</ul>
</li>
<li>
<p>对目录来说</p>
<ul>
<li>r：可以列出目录中的内容</li>
<li>w：可以在目录创建、删除文件</li>
<li>x：可以进入目录</li>
</ul>
</li>
</ul>
<h2 id="lian-jie-ming-ling"><a class="header-anchor" href="#链接命令">¶</a>链接命令</h2>
<h3 id="ln"><a class="header-anchor" href="#ln">¶</a>ln</h3>
<ul>
<li>
<p>原意link，路径/bin/ln</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：生成链接文件</p>
</li>
<li>
<p>语法：ln 【选项】 【原文件】 【目标文件】</p>
</li>
<li>
<p>常用参数</p>
<ul>
<li>-s，创建软连接</li>
</ul>
</li>
<li>
<p>链接概念</p>
<ul>
<li>
<p>软链接</p>
<ul>
<li>类似于快捷方式，指向性符号链接</li>
<li>源文件丢失后无法运行</li>
<li>i节点和源文件不同</li>
</ul>
</li>
<li>
<p>硬链接</p>
<ul>
<li>拷贝且与源文件同时更新</li>
<li>源文件丢失后可以访问</li>
<li>i节点与源文件相同</li>
<li>不能跨分区建立，不能针对目录建立</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="yong-hu-guan-li-ming-ling"><a class="header-anchor" href="#用户管理命令">¶</a>用户管理命令</h2>
<h3 id="useradd"><a class="header-anchor" href="#useradd">¶</a>useradd</h3>
<ul>
<li>所在路径/usr/sbin/useradd</li>
<li>执行权限：root用户</li>
<li>功能：添加新用户</li>
<li>语法：useradd 【用户名】</li>
</ul>
<h3 id="passwd"><a class="header-anchor" href="#passwd">¶</a>passwd</h3>
<ul>
<li>
<p>所在路径/usr/bin/passwd</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：设置用户明码</p>
</li>
<li>
<p>语法：passwd【用户名】</p>
</li>
<li>
<p>注意</p>
<ul>
<li>root用户可以无视密码复杂度修改，普通用户不行</li>
<li>普通用户只能更改自己的密码，root用户可修改任何用户密码</li>
</ul>
</li>
</ul>
<h3 id="who"><a class="header-anchor" href="#who">¶</a>who</h3>
<ul>
<li>所在路径：usr/bin/who</li>
<li>执行权限：所有用户</li>
<li>功能：查看登录用户信息</li>
<li>语法：who</li>
<li>tty为本地终端登录，pts为远程终端登陆</li>
<li>注：用w命令能得到更详细的信息</li>
</ul>
<h2 id="bang-zhu-ming-ling"><a class="header-anchor" href="#帮助命令">¶</a>帮助命令</h2>
<h3 id="man"><a class="header-anchor" href="#man">¶</a>man</h3>
<ul>
<li>
<p>原意manual，所在路径/usr/bin/man</p>
</li>
<li>
<p>执行权限：所有用户</p>
</li>
<li>
<p>功能：获取帮助信息</p>
</li>
<li>
<p>语法：man  【命令或配置文件】</p>
</li>
<li>
<p>man ls，查看ls命令的帮助信息</p>
</li>
<li>
<p>man services，查看配置文件信息（不用绝对路径）</p>
</li>
<li>
<p>当命令和配置文件重名时会优先查看命令</p>
<ul>
<li>1，代表命令</li>
<li>5，代表文件</li>
<li>查看文件使用 man 5 XXX</li>
</ul>
</li>
</ul>
<h3 id="qi-ta-ming-ling"><a class="header-anchor" href="#其他命令">¶</a>其他命令</h3>
<ul>
<li>whatis，只查看命令做什么用的信息</li>
<li>apropos，查看配置文件用途信息（不用绝对路径）</li>
<li>命令   --help，查看命令的常见选项信息</li>
<li>help，查看shell内置命令信息</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Java异常</title>
    <url>/2021/05/06/Java/Java%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h1 id="yi-chang">异常</h1>
<h2 id="shi-yao-shi-yi-chang"><a class="header-anchor" href="#什么是异常">¶</a>什么是异常</h2>
<p>实际工作中，遇到的情况不可能绝对完美</p>
<p>如：</p>
<ol>
<li>
<p>用户输入不符合要求</p>
</li>
<li>
<p>文件不存在或格式不对</p>
</li>
<li>
<p>读取数据库数据为空</p>
</li>
<li>
<p>内存或硬盘写满，等等</p>
</li>
</ol>
<p>以上都称为异常，英文<strong>Exception</strong></p>
<p>异常指程序运行中出现的各种意外情况</p>
<p>发生在程序运行期间，影响程序执行流程</p>
<h2 id="yi-chang-de-fen-lei"><a class="header-anchor" href="#异常的分类">¶</a>异常的分类</h2>
<ol>
<li>
<p>检查性异常：</p>
<p>最具代表的是<strong>用户错误或问题引起</strong>的异常</p>
<p>是<strong>程序员无法预见</strong>的</p>
<p>在编译时<strong>无法简单地忽略</strong></p>
</li>
<li>
<p>运行时异常</p>
<p>运行时异常<strong>可能被程序员避免</strong>的异常</p>
<p>与检查性异常相反，运行时可以在<strong>编译时被忽略</strong></p>
</li>
<li>
<p>错误ERROR</p>
<p><strong>错误不是异常</strong>，而是脱离程序员控制的问题</p>
<p>在代码中通常被忽略</p>
<p>在编译时<strong>检查不到</strong>的</p>
</li>
</ol>
<h2 id="yi-chang-ti-xi-jie-gou"><a class="header-anchor" href="#异常体系结构">¶</a>异常体系结构</h2>
<p>Java中把异常当作对象来处理</p>
<p>并定义了一个基类<strong>java.lang.Throwable</strong>作为所有异常的超类</p>
<p>异常通常在框架中分为错误ERROR和异常Exception</p>
<h2 id="cuo-wu-error"><a class="header-anchor" href="#错误ERROR">¶</a>错误ERROR</h2>
<p>Error类由Java虚拟机生成并抛出</p>
<p>大多数错误与代码编写者所执行的操作无关</p>
<p>虚拟机运行错误：</p>
<ol>
<li>
<p>当JVM不再有继续执行操作所需要的内存资源时</p>
</li>
<li>
<p>将出现OutOfMemoryError</p>
</li>
<li>
<p>这些异常发生时，JVM（虚拟）一般会选择线程终止</p>
</li>
</ol>
<p>还有虚拟机试图执行应用时：</p>
<ol>
<li>
<p>类定义错误NoClassDefFoundError</p>
</li>
<li>
<p>链接错误LinkageError</p>
</li>
<li>
<p>这些错误不可查</p>
</li>
<li>
<p>应用程序的控制和处理能力之外</p>
</li>
<li>
<p>绝大多数时程序运行时不允许出现的状况</p>
</li>
</ol>
<h2 id="exception"><a class="header-anchor" href="#Exception">¶</a>Exception</h2>
<p>异常分支：</p>
<ol>
<li>RuntimeException，运行时异常</li>
<li>ArraryIndexOutOfBoundsException，数据下标越界</li>
<li>NullPointerException，空指针异常</li>
<li>ArithmeticException，算数异常</li>
<li>MissingResourceException，丢失资源</li>
<li>ClassNotFoundException，找不到类</li>
</ol>
<p>以上异常是不检查异常，程序可以选择捕获处理，也可以不处理</p>
<p>一些异常一般由程序逻辑错误引起的，应尽可能避免这些异常发生</p>
<h2 id="error-he-exception-de-qu-bie"><a class="header-anchor" href="#Error和Exception的区别">¶</a>Error和Exception的区别</h2>
<ol>
<li>Error通常是灾难性的致命的错误，是程序无法控制和处理的</li>
<li>当出现这些异常时，JVM通常会终止进程</li>
<li>而Exception通常时可以被程序处理的</li>
<li>并且在程序中应尽可能的去处理这些异常</li>
</ol>
<h2 id="yi-chang-chu-li-ji-zhi"><a class="header-anchor" href="#异常处理机制">¶</a>异常处理机制</h2>
<h4 id="pao-chu-yi-chang"><a class="header-anchor" href="#抛出异常">¶</a>抛出异常</h4>
<h4 id="bu-huo-yi-chang"><a class="header-anchor" href="#捕获异常">¶</a>捕获异常</h4>
<h4 id="yi-chang-chu-li-wu-ge-guan-jian-zi"><a class="header-anchor" href="#异常处理五个关键字">¶</a>异常处理五个关键字</h4>
<ol>
<li>try</li>
<li>catch</li>
<li>finally</li>
<li>throw ，方法中抛出异常使用</li>
<li>throws，方法抛出异常</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//try监控区域</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//参数为想要捕获的异常类型，若有对应异常则执行</span></span><br><span class="line">            <span class="comment">//最大的参数为 throwable</span></span><br><span class="line">            <span class="comment">//可以有多个catch，但是会执行最先匹配的</span></span><br><span class="line">            <span class="comment">//因此需要将范围最大的写在最后面</span></span><br><span class="line">            <span class="comment">//快捷键：ctrl+alt+t</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Error e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Throwable&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123; <span class="comment">//善后工作，是否处理异常不影响执行，可以不写finally</span></span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">            <span class="comment">//finally一般用于IO流、资源等的关闭，如scanner.close</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> Test().test(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            e.printStackTrace(); <span class="comment">//输出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//throw throws</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><span class="keyword">throws</span> ArithmeticException</span>&#123;<span class="comment">//若方法中处理不了异常，则方法抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();<span class="comment">//主动抛出异常，主要用于方法中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="zi-ding-yi-yi-chang"><a class="header-anchor" href="#自定义异常">¶</a>自定义异常</h2>
<p>Java内置的异常类可以描述编程时出现的大部分异常</p>
<p>自定义异常只需继承Exception类即可</p>
<p>创建自定义异常步骤：</p>
<ol>
<li>创建自定义异常类</li>
<li>方法种通过throw关键字抛出异常对象</li>
<li>若在当前抛出异常的方法中处理异常，则用try-catch语句捕获并处理</li>
<li>否则在方法声明处通过throws指名要抛出给方法调用者的异常</li>
<li>再在出现异常方法的调用者中捕获并处理异常</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> MyException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">if</span>(a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(a); <span class="comment">//抛出异常，下面的语句不执行</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">11</span>); <span class="comment">//调用测试函数</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;MyException=&gt;&quot;</span> + e.toString());;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="comment">//传递数字大于10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> detail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.detail = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印错误信息方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyException&#123;&quot;</span> + detail + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="zong-jie"><a class="header-anchor" href="#总结">¶</a>总结</h2>
<ol>
<li>处理异常时，采用逻辑去合理规避同时使用try-catch处理</li>
<li>多重catch块后，可以加一个catch(exception)来处理可能被遗漏的异常</li>
<li>对于不确定的代码，也可以使用try-catch来处理潜在异常</li>
<li>尽量去处理异常，不能只是简单打印输出异常信息</li>
<li>如何处理异常根据不同的业务需求和异常类型决定</li>
<li>尽量添加finally块去释放占用的资源</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>“Java基础”</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面向对象编程</title>
    <url>/2021/05/06/Java/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="mian-xiang-dui-xiang-bian-cheng-oop">面向对象编程（OOP）</h1>
<h2 id="mian-xiang-guo-cheng-si-xiang"><a class="header-anchor" href="#面向过程思想">¶</a>面向过程思想</h2>
<p>步骤清晰简单</p>
<p>第一步做什么，第二步做什么</p>
<p>面向过程适合处理一些简单的问题</p>
<h2 id="mian-xiang-dui-xiang-si-xiang"><a class="header-anchor" href="#面向对象思想">¶</a>面向对象思想</h2>
<p>分类的思维模式</p>
<p>思考问题首先会解决问题需要哪些分类</p>
<p>对分类进行单独思考</p>
<p>最后对某个分类的细节进行面向过程的思索</p>
<p>适合处理复杂的问题，适合处理需要多人协作的问题</p>
<p><strong>总结：</strong></p>
<ol>
<li>对于描述复杂的事物，为了从宏观上把握</li>
<li>整体上合理分析，我们需要使用面向对象的思路来分析</li>
<li>但到了具体的微观操作，仍然需要面向过程的思路去处理</li>
</ol>
<h2 id="shi-yao-shi-mian-xiang-dui-xiang"><a class="header-anchor" href="#什么是面向对象">¶</a>什么是面向对象</h2>
<p>面向对象编程的本质：</p>
<p><strong>以类的方式组织代码，以对象的形式（封装）数据</strong></p>
<ol>
<li>抽象：抽取对象相似的部分组成类，类是对对象的抽象</li>
<li>三大特性：封装、继承、多态</li>
</ol>
<p>从认识论角度考虑是先有对象后有类</p>
<p>从代码实现的角度是先有类后有对象</p>
<h2 id="fang-fa-de-hui-gu"><a class="header-anchor" href="#方法的回顾">¶</a>方法的回顾</h2>
<h5 id="strong-fang-fa-de-ding-yi-strong"><a class="header-anchor" href="#方法的定义：">¶</a><strong>方法的定义：</strong></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符  返回值类型  方法名()&#123;</span><br><span class="line"><span class="comment">//方法体</span></span><br><span class="line"><span class="keyword">return</span>返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="break-he-return"><a class="header-anchor" href="#break和return">¶</a>break和return</h5>
<p>代码执行到return即代表方法结束，返回一个结果</p>
<p>break将循环终止，跳出循环</p>
<h5 id="can-shu-lie-biao"><a class="header-anchor" href="#参数列表">¶</a>参数列表</h5>
<p>参数类型、参数名、可变长参数…</p>
<h5 id="fang-fa-de-diao-yong"><a class="header-anchor" href="#方法的调用">¶</a>方法的调用</h5>
<p><strong>静态方法：</strong></p>
<ol>
<li>static关键字声明，通过类名.方法名调用</li>
<li>static是和类一起加载的，有了static后类存在方法即存在</li>
</ol>
<p><strong>非静态方法：</strong></p>
<ol>
<li>通过实例化类进行调用，new</li>
<li>然后通过对象名.方法名调用（对象类型  对象名 = 对象值）</li>
<li>类实例化后方法才存在，不存在和存在的方法间不能调用</li>
<li><strong>同一个类中不同的方法可以通过非静态方法调用</strong></li>
<li><strong>非静态方法可以调用静态方法，但是静态方法不能调用非静态方法</strong></li>
</ol>
<p><strong>形参和实参：</strong></p>
<ol>
<li>形参是方法中变量的名字</li>
<li>实参是实际调用方法时传递的值</li>
</ol>
<p><strong>值传递和引用传递：</strong></p>
<ol>
<li>值传递类似于形参的概念，只传递值，在作用域内生效</li>
<li>引用传递类似于实参，会修改实际的值</li>
</ol>
<p><strong>this关键字</strong></p>
<p>代表当前所在的类</p>
<h2 id="lei-he-dui-xiang-de-guan-xi"><a class="header-anchor" href="#类和对象的关系">¶</a>类和对象的关系</h2>
<p>类是一种抽象的数据类型，对某一类事物整体描述/定义，不代表具体的事物：如动物、植物、手机等，用来<strong>描述事物应具备的特点和行为</strong></p>
<p>对象是抽象概念的具体实例：如：张三是具体的人，家里的狗，<strong>能够体现出特点，展现出功能的实例，而不是抽象的概念</strong></p>
<h2 id="chuang-jian-yu-chu-shi-hua-dui-xiang"><a class="header-anchor" href="#创建与初始化对象">¶</a>创建与初始化对象</h2>
<p>new关键字，创建时除了分配内存外，还会给对象进行默认的初始化以及对类中构造器的调用</p>
<p>类中的构造器也称为构造方法，是在进行创建对象的时候必须调用的</p>
<p>并且构造器有以下特点：</p>
<ol>
<li><strong>必须和类名字相同</strong></li>
<li>必须<strong>没有返回类型</strong>，也<strong>不能写void</strong></li>
<li>创建类的时候就是默认生成的，但也可以显示出来使用（alt+insert）</li>
<li><strong>有参构造器存在，若使用无参构造则无参构造器必须显示出来</strong></li>
</ol>
<p>构造器的作用：</p>
<ol>
<li>实例化初始值</li>
<li>new创建对象的本质就是调用构造器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">strudent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">strudent</span><span class="params">()</span> </span>&#123;  <span class="comment">//无参构造</span></span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;aa&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.age = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">strudent</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;  <span class="comment">//有参构造</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数调用</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> strudent xm = new strudent();</span></span><br><span class="line"><span class="comment"> strudent xiaohong = new strudent(&quot;xiaohong&quot;, 10);</span></span><br><span class="line"><span class="comment"> System.out.println(xm.name);</span></span><br><span class="line"><span class="comment"> System.out.println(xm.age);</span></span><br><span class="line"><span class="comment"> System.out.println(xiaohong.name);</span></span><br><span class="line"><span class="comment"> System.out.println(xiaohong.age);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="feng-zhuang"><a class="header-anchor" href="#封装">¶</a>封装</h2>
<p>内部数据操作细节自己完成，不允许外部干涉，仅暴露少量的方法供外部使用</p>
<p>做到高内聚，低耦合</p>
<p>属性私有，get/set（alt+inset快速生成）</p>
<p>关键字 private修饰属性</p>
<p>意义：</p>
<ol>
<li>提高程序安全性</li>
<li>隐藏代码的实现细节</li>
<li>统一接口，形成规范</li>
<li>提高了系统的可维护性</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">student2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//private修饰禁止直接调用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  <span class="comment">//外部获取对应的属性值</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  <span class="comment">//外部设置属性值</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="comment">//可以对输入参数做判断等</span></span><br><span class="line">        <span class="keyword">if</span>(age&gt;<span class="number">0</span> &amp;&amp; age &lt;<span class="number">100</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不合法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  主函数</span></span><br><span class="line"><span class="comment">public class application &#123;</span></span><br><span class="line"><span class="comment">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">        student2 s1 = new student2();</span></span><br><span class="line"><span class="comment">        System.out.println(s1.getAge());</span></span><br><span class="line"><span class="comment">        s1.setAge(90);</span></span><br><span class="line"><span class="comment">        System.out.println(s1.getAge());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="ji-cheng"><a class="header-anchor" href="#继承">¶</a>继承</h2>
<p>本质是对某一批类的抽象，实现更好的建模</p>
<p>extends，扩展，子类是父类的扩展</p>
<p><strong>JAVA只有单继承，没有多继承</strong></p>
<ol>
<li>
<p>继承是类与类的一种关系，包括依赖，组合，聚合等</p>
</li>
<li>
<p>继承的两个类，一个是子类（派生）一个是父类（基类）</p>
</li>
<li>
<p>子类继承父类，使用extends来表示</p>
</li>
<li>
<p>子类和父类之间，具有类似is 的关系</p>
</li>
<li>
<p>private修饰的属性或方法无法被继承</p>
</li>
</ol>
<p>ctrl + h 可以查询继承树</p>
<p>Object类：所有的类都默认继承的总类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">&quot;Person&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(); <span class="comment">//此为隐藏函数，写不写效果一致，但默认优先调用，若父类是有参构造，则需要写，并在括号里填写对应参数进行调用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Student无参构造&quot;</span>);</span><br><span class="line">        setAge(<span class="number">20</span>);</span><br><span class="line">        System.out.println(getAge());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">&quot;student&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;==============&quot;</span>);</span><br><span class="line">        say();</span><br><span class="line">        <span class="keyword">this</span>.say();</span><br><span class="line">        <span class="keyword">super</span>.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用主函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="super"><a class="header-anchor" href="#super：">¶</a>super：</h5>
<p>类似于this，但是调用的父类的属性或方法（private不行）、</p>
<p><strong>注意：</strong></p>
<ol>
<li>super调用父类的构造方法，必须是构造方法的第一个</li>
<li>super必须只能出现在子类的方法或构造方法中</li>
<li>构造器中super和this不能同时调用构造方法</li>
<li>this没有继承也可以调用，super必须在继承的子类中使用</li>
</ol>
<h5 id="fang-fa-zhong-xie"><a class="header-anchor" href="#方法重写">¶</a>方法重写</h5>
<p><strong>前提：</strong></p>
<ol>
<li>
<p>和属性无关</p>
</li>
<li>
<p>需要有继承关系，子类重写父类</p>
</li>
<li>
<p>参数列表也必须相同</p>
</li>
<li>
<p>重写只跟非静态方法有关</p>
</li>
</ol>
<p><strong>注意：</strong></p>
<ol>
<li>静态方法是类的方法，非静态方法是对象的方法</li>
<li>有static修饰时，根据定义的数据类型来决定调用</li>
<li>没有static修饰时，根据对象来决定调用</li>
<li>不能用private修饰方法</li>
<li><strong>修饰符的范围重写可以扩大</strong>：public&gt;protected&gt;default&gt;private</li>
<li><strong>抛出的异常范围重写可以缩小不能扩大</strong></li>
<li>子类和父类方法名必须一致，方法内容可以不同</li>
</ol>
<p><strong>为什么需要重写</strong></p>
<p>父类的功能子类不一定需要或者不一定满足</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;  <span class="comment">//非静态方法，属于对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Person run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;  <span class="comment">//静态方法属于类</span></span><br><span class="line">        System.out.println(<span class="string">&quot;this is person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">//重写注释</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is teacher&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        Person s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        Teacher s3 = <span class="keyword">new</span> Teacher();</span><br><span class="line">        Person s4 = <span class="keyword">new</span> Teacher();</span><br><span class="line">        s1.run(); <span class="comment">//正常调用student类的方法</span></span><br><span class="line">        s2.run();<span class="comment">//没有static修饰时，因为方法重写，调用右边对象所对应的类，输出student</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">        s3.say();<span class="comment">//static修饰，正常调用类中方法，输出teacher</span></span><br><span class="line">        s4.say();<span class="comment">//输出Person</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="duo-tai"><a class="header-anchor" href="#多态">¶</a>多态</h2>
<p>同一方法可以根据发送对象的不同而采用多种不同的行为方式</p>
<p>一个对象的实际类型是确定的，但可以指向对象的引用类型有很多</p>
<p><strong>存在条件：</strong></p>
<ol>
<li>有继承关系</li>
<li>子类重写父类方法</li>
<li>父类引用指向子类对象</li>
</ol>
<p><strong>注意：</strong></p>
<ol>
<li>多态是方法的多态，属性没有多态性</li>
<li>父类和子类，有联系，类型转换异常，<em>ClassCastException</em></li>
<li>不能用static、private修饰，final常量也不行</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">//重写方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;  <span class="comment">//子类独有</span></span><br><span class="line">            System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多态指 对象的实际类型确定</span></span><br><span class="line"><span class="comment">//但是引用类型可以为各种各样（必须有继承关系）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//子类对象创建子类引用类型，能调用子类方法和父类继承的方法</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//子类对象创建父类引用，可以指向子类，但不能调用子类独有方法</span></span><br><span class="line">        Person s2 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象执行什么方法，看对象左边的类型，和右边对象关系不大</span></span><br><span class="line">        s1.run(); <span class="comment">//方法重写，按对象类型调用方法，两个输出都为student</span></span><br><span class="line">        s2.run();</span><br><span class="line">        s1.eat(); <span class="comment">//因为eat方法为子类独有，因此子类可以正常调用</span></span><br><span class="line">        ((Student) s2).eat();<span class="comment">//父类要想调用子类独有方法，需要强制转换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="instanceof"><a class="header-anchor" href="#Instanceof">¶</a>Instanceof</h5>
<p>判断一个对象是什么类型，是否存在继承关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">X <span class="keyword">instanceof</span> Y <span class="comment">//判断X是否属于Y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Object -&gt; String</span></span><br><span class="line">        <span class="comment">//Object -&gt; Person -&gt; Teacher</span></span><br><span class="line">        <span class="comment">//Object -&gt; Person -&gt; student</span></span><br><span class="line">        Object object = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student); <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person); <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher); <span class="comment">//false</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object); <span class="comment">//true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String); <span class="comment">//false //不报错是因为Object为基类，编译只看是否有父子关系，对错再判断</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher); <span class="comment">// false</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object); <span class="comment">// true</span></span><br><span class="line">        <span class="comment">//System.out.println(person instanceof String); // 因为同级所以编译错误</span></span><br><span class="line">         System.out.println(<span class="string">&quot;==============================&quot;</span>);</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student); <span class="comment">//true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Person); <span class="comment">//true</span></span><br><span class="line">        <span class="comment">//System.out.println(student instanceof Teacher); //同级编译错误</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Object); <span class="comment">//true</span></span><br><span class="line">        <span class="comment">//System.out.println(student instanceof String); //无继承关系，报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="yin-yong-lei-xing-zhuan-huan"><a class="header-anchor" href="#引用类型转换">¶</a>引用类型转换</h5>
<p>父类为高，子类为低</p>
<p>低定义高，可以自动转换，高转低需要手动强制转换</p>
<p>父类指向子类，会丢失一些自己本来的方法，若想使用需要强制转换</p>
<p>方便方法的调用，减少重复的代码</p>
<p><em>参考多态示例代码</em></p>
<h2 id="static-guan-jian-zi-xiang-jie"><a class="header-anchor" href="#Static关键字详解">¶</a>Static关键字详解</h2>
<p>静态修饰符，被修饰的为静态，属于类，类加载则加载</p>
<p>直接调用或者使用类名进行调用</p>
<p>可以写静态代码块，只执行一次</p>
<p>可以静态导入包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">application</span> </span>&#123;</span><br><span class="line">    <span class="comment">//匿名代码块，可以用于赋初值</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态代码块，最先执行，且只执行一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造器，最后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">application</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        application application = <span class="keyword">new</span> application();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">静态代码块</span><br><span class="line">匿名代码块</span><br><span class="line">构造器</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//静态导入包</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">application</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Math.random()); <span class="comment">//正常调用</span></span><br><span class="line">        System.out.println(random()); <span class="comment">//静态导入包后调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="chou-xiang-lei"><a class="header-anchor" href="#抽象类">¶</a>抽象类</h2>
<p>abstract修饰，可以修饰类和方法</p>
<p>本质是一种约束，只有方法名字，没有方法的实现</p>
<p><strong>注意：</strong></p>
<ol>
<li>不能new抽象类，只能靠子类去实现它</li>
<li>抽象类中可以写普通的方法</li>
<li>抽象方法必须在抽象类中</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类，abstract修饰</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="comment">//抽象类存在构造器</span></span><br><span class="line">    <span class="comment">//若是有参构造，其子类也需要创建有参构造调用抽象类的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//抽象方法只能有方法名字，没有方法内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//不能new抽象类，只能靠子类实现，是一种约束</span></span><br><span class="line">    <span class="comment">//抽象类中可以有普通方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类的所有方法，继承了它的子类，都必须实现它的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Action&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.OOP.demo07.A;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> A().doSomething();</span><br><span class="line">        <span class="keyword">new</span> A().run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="jie-kou"><a class="header-anchor" href="#接口">¶</a>接口</h2>
<p>普通类：只有具体的实现方法</p>
<p>抽象类：可以有具体的方法，也可以只有规范（抽象方法）</p>
<p>接口：只有规范，自己无法写方法，专业的约束，实现约束和实现分离</p>
<p><strong>描述：</strong></p>
<ol>
<li><strong>接口就是规范</strong>，定义的是一组规则，让不同的人实现</li>
<li><strong>接口的本质是契约</strong>，制定好后需要遵守</li>
<li>接口是对 对象的抽象</li>
<li>设计模式所研究的实际就是如何合理的去抽象</li>
<li>接口声明的<strong>关键字interface</strong></li>
</ol>
<p><strong>注意：</strong></p>
<ol>
<li>接口不能被实例化，接口中没有构造方法</li>
<li>接口中不推荐定义常量，没有意义</li>
<li>implements可以实现多个接口，伪多继承</li>
<li>实现接口必须在类中重写接口的抽象方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接口中的所有定义方法都是抽象的,用public abstract修饰，不用写</span></span><br><span class="line">    <span class="comment">//定义的属性都是常量,用public static final修饰，不推荐使用</span></span><br><span class="line">     <span class="keyword">int</span> age =<span class="number">90</span>;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimerService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类可以实现接口，inplements 接口</span></span><br><span class="line"><span class="comment">//实现了接口的类需要重写接口中的方法</span></span><br><span class="line"><span class="comment">//接口可以实现多继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>,<span class="title">TimerService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nei-bu-lei"><a class="header-anchor" href="#内部类">¶</a>内部类</h2>
<p>内部类就是在一个类的内部再定义一个类</p>
<p>A类中定义B类，A是B的外部类，B是A的内部类</p>
<ol>
<li>成员内部类</li>
<li>静态内部类</li>
<li>局部内部类</li>
<li>匿名内部类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//外部类，只能有一个public修饰符的外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;外部类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//内部类可以直接调用外部类方法</span></span><br><span class="line">            out();</span><br><span class="line">            System.out.println(<span class="string">&quot;内部类方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//内部类可以直接获得外部类的私有属性</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(id);<span class="comment">//直接调用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;局部内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">        <span class="comment">//静态内部类无法直接获取动态类的方法和属性</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        outer.out();</span><br><span class="line">        <span class="comment">//通过外部类对象实例化内部类对象</span></span><br><span class="line">        Outer.Inner inner = outer.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        inner.in();</span><br><span class="line">        inner.getID();</span><br><span class="line">        <span class="comment">//匿名内部类，不用变量保存实例化对象，直接调用</span></span><br><span class="line">        <span class="keyword">new</span> Apple().eat();</span><br><span class="line">        <span class="comment">//匿名接口，调用接口，必须重写方法</span></span><br><span class="line">        <span class="keyword">new</span> UserService()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//java中可以有多个类，但只能有一个public类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>“Java基础”</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据详解</title>
    <url>/2021/05/06/Java/Java%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="shu-zu">数组</h1>
<h2 id="shu-zu-de-ding-yi"><a class="header-anchor" href="#数组的定义">¶</a>数组的定义</h2>
<ol>
<li>相同类型数据的有序集合</li>
<li>相同类型的若干个数据按一定先后次序排序组合而成</li>
<li>每一个数据称为一个数组元素，可以通过下标访问</li>
</ol>
<h2 id="shu-zu-de-sheng-ming-chuang-jian"><a class="header-anchor" href="#数组的声明创建">¶</a>数组的声明创建</h2>
<p>数组必须先声明，才能在程序中使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明数组</span></span><br><span class="line">dataType[] arrayRefVar;  <span class="comment">//首选方法</span></span><br><span class="line">或</span><br><span class="line">dataType arrayRefVar[]; <span class="comment">//效果一致但不推荐</span></span><br></pre></td></tr></table></figure>
<p>Java使用new操作符创建数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建数组</span></span><br><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize]</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ol>
<li>数组的元素是通过索引访问的，索引从0开始</li>
<li>获取数组长度使用array.length</li>
<li>数组要先声明，再创建、然后赋值，声明和创建可写成一行</li>
</ol>
<p><strong>数组的特点：</strong></p>
<ol>
<li>数组长度是固定的，一旦创建不可修改</li>
<li>元素必须相同类型</li>
<li>数组中元素可以是任何数据类型，包括基本类型和引用类型</li>
<li>数组变量属于引流类型，也可看成对象</li>
<li>数组中每个元素相当于对象的成员变量</li>
<li>数组无论什么类型，本身是在堆中的</li>
</ol>
<h2 id="nei-cun-fen-xi"><a class="header-anchor" href="#内存分析">¶</a>内存分析</h2>
<ol>
<li>堆
<ol>
<li>存放new的对象和数组</li>
<li>可以被所有的线程共享，不会存放别的对象引用</li>
</ol>
</li>
<li>栈
<ol>
<li>存放基本变量类型，包含变量具体的数值</li>
<li>引用对象的变量，会存放这个引用在堆里的具体地址</li>
</ol>
</li>
<li>方法区
<ol>
<li>可以被所有的线程共享</li>
<li>包含所有的class和static变量</li>
</ol>
</li>
</ol>
<h2 id="shu-zu-de-san-chong-chu-shi-hua"><a class="header-anchor" href="#数组的三种初始化">¶</a>数组的三种初始化</h2>
<h4 id="jing-tai-chu-shi-hua"><a class="header-anchor" href="#静态初始化">¶</a>静态初始化</h4>
<p>创建数组的同时完成值的初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">Man[] mans = &#123;<span class="keyword">new</span> Man(<span class="number">1</span>,<span class="number">1</span>),<span class="keyword">new</span> Man(<span class="number">2</span>,<span class="number">2</span>)&#125;</span><br></pre></td></tr></table></figure>
<h4 id="dong-tai-chu-shi-hua-bao-han-mo-ren-chu-shi-hua"><a class="header-anchor" href="#动态初始化（包含默认初始化）">¶</a>动态初始化（包含默认初始化）</h4>
<p>创建数组，手动赋值完成初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<h4 id="mo-ren-chu-shi-hua"><a class="header-anchor" href="#默认初始化">¶</a>默认初始化</h4>
<p>数组是引用类型，元素相当于类的实例变量</p>
<p>因此其中每个元素也被按照实例变量同样的方式被隐藏式初始化</p>
<h2 id="shu-zu-de-bian-jie"><a class="header-anchor" href="#数组的边界">¶</a>数组的边界</h2>
<p>数组下标的合法区间是[0，length - 1]，越界则会报错</p>
<p>ArrayIndexOutOfBoundsException:数组下标越界</p>
<h2 id="shu-zu-de-shi-yong"><a class="header-anchor" href="#数组的使用">¶</a>数组的使用</h2>
<ol>
<li>增强for循环</li>
<li>数组作方法入参</li>
<li>数组的返回值</li>
</ol>
<p>实例演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        Demo01 demo01 = <span class="keyword">new</span> Demo01();</span><br><span class="line">        <span class="comment">//打印数组</span></span><br><span class="line">        demo01.printArray(num);</span><br><span class="line"> System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">        <span class="comment">//反转数组</span></span><br><span class="line">        <span class="keyword">int</span>[] reverse = demo01.reverse(num);</span><br><span class="line">        demo01.printArray(reverse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印数组方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : array) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反转数组方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span>[] array)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[array.length];</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>; <span class="comment">//临时变量存储值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (array.length/<span class="number">2</span> + <span class="number">1</span>); i++) &#123; <span class="comment">//加1是因为数组索引减1</span></span><br><span class="line">            temp = array[i] + array[array.length - <span class="number">1</span> - i];</span><br><span class="line">            result[i] = temp - array[i];</span><br><span class="line">            result[array.length - <span class="number">1</span> - i] = temp - array[array.length - <span class="number">1</span> - i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>
<h2 id="duo-wei-shu-zu"><a class="header-anchor" href="#多维数组">¶</a>多维数组</h2>
<p>数组的数组，数组中的元素就是数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">5</span>]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[][] = &#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i].length; j++) &#123;</span><br><span class="line">            System.out.println(a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="arrays-lei"><a class="header-anchor" href="#Arrays类">¶</a>Arrays类</h2>
<p>数组的工具类java.util.Arrays</p>
<p>可以对数据对象进行一些基本的操作</p>
<p>查看JDK帮助文档</p>
<p>Arrays类中的方法都是static修饰的静态方法，使用时可以直接使用类名进行调用（不用使用对象来调用，不是不能）</p>
<p><strong>常用功能：</strong></p>
<ol>
<li>给数组赋值：fill方法</li>
<li>对数组排序：sort方法，升序</li>
<li>比较数组：equals方法比较元素值是否相等</li>
<li>查找数组元素：binarySearch方法对数组进行二分查找</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">551</span>,<span class="number">5215</span>,<span class="number">123</span>,<span class="number">5412</span>,<span class="number">767</span>&#125;;</span><br><span class="line">    System.out.println(arr);<span class="comment">//直接打印输出HashCode</span></span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">    <span class="comment">//数组填充，左闭右开区间</span></span><br><span class="line">    Arrays.fill(arr,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>);<span class="comment">//替换下标2，3的元素为0</span></span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="mou-pao-pai-xu"><a class="header-anchor" href="#冒泡排序">¶</a>冒泡排序</h2>
<p>排序算法总共又八种</p>
<p>比较相邻的两个数的大小，第一个比第二个大则交换位置</p>
<p>直到所有数两两对比过为止</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">    sort(arr);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123; <span class="comment">//每轮比较后起点往后移，最多比到n-1的位置即可</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length -<span class="number">1</span> -i; j++) &#123; <span class="comment">//从起点的下一位开始比较，到数组最后一个元素</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;  <span class="comment">//两个比较的数交换位置</span></span><br><span class="line">                arr[j] += arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j] - arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j] -= arr[j+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="xi-shu-shu-zu"><a class="header-anchor" href="#稀疏数组">¶</a>稀疏数组</h2>
<p>数组中大部分元素为0或者为同一个值时，可以用稀疏数组来保存</p>
<p>达到压缩数组的目的</p>
<p><strong>处理方式：</strong></p>
<ol>
<li>记录数组一共几行几列，有多少个不同的值</li>
<li>把具有不同值的元素和行列以及值记录在一个小规模的数组中</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>“Java基础”</tag>
      </tags>
  </entry>
  <entry>
    <title>Java流程控制</title>
    <url>/2021/05/06/Java/Java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h1 id="liu-cheng-kong-zhi">流程控制</h1>
<h2 id="yong-hu-jiao-hu-scanner"><a class="header-anchor" href="#用户交互Scanner">¶</a>用户交互Scanner</h2>
<p>实现程序和人的交互</p>
<p>工具类，java.util.Scanner，java5的新特征</p>
<p><strong>Scanner类来获取用户的输入</strong></p>
<p>基本语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>通过Scanner类的**next()<strong>和</strong>nextLine()**方法来获取输入的字符串</p>
</li>
<li>
<p>读取前一般需要使用**hasNext()<strong>和</strong>hasNextLine()**判断是否还有输入的数据</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">scanner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个scanner对象</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用next接收:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户是否输入字符串</span></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            String str = scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的内容为：&quot;</span> +str);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close(); <span class="comment">//凡是属于IO（输入输出）流的类如果不关闭会已知占用资源，关闭scanner类，节约资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>next():</p>
<ol>
<li><em>一定要读取到有效字符后才可以结束输入</em></li>
<li><em>对输入有效字符之前遇到的空格会自动去掉</em></li>
<li><em>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符</em></li>
<li><em><strong>next()不能得到带有空格的字符串</strong></em></li>
</ol>
<p>nextLine():</p>
<ol>
<li><em>以Enter作为结束符，此方法返回的是输入回车之前的所有字符</em></li>
<li><em>可以获得空白格字符</em></li>
</ol>
<p>因此输入语法可简化为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">scanner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个scanner对象</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用next接收:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String str = scanner.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;输出的内容为：&quot;</span> +str);</span><br><span class="line">        </span><br><span class="line">        scanner.close(); <span class="comment">//凡是属于IO（输入输出）流的类如果不关闭会已知占用资源，关闭scanner类，节约资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="jin-jie-yong-fa"><a class="header-anchor" href="#进阶用法">¶</a>进阶用法</h3>
<h4 id="strong-pan-duan-shu-ru-de-shu-ju-lei-xing-strong"><a class="header-anchor" href="#判断输入的数据类型">¶</a><strong>判断输入的数据类型</strong></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//键盘接收数据</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.0f</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNextInt())&#123; <span class="comment">//判断输入是否为整数</span></span><br><span class="line">            i = scanner.nextInt(); <span class="comment">//将输入的整数赋值给i</span></span><br><span class="line">            System.out.println(<span class="string">&quot;整数数据：&quot;</span> + i);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不是整数！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入小数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNextFloat())&#123;</span><br><span class="line">            f = scanner.nextFloat();</span><br><span class="line">            System.out.println(<span class="string">&quot;小数数据：&quot;</span> + f);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不是小数！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="xun-huan-shu-ru-shu-ju-bing-qiu-qu-he-yu-ping-jun-zhi-shu-chu"><a class="header-anchor" href="#循环输入数据并求取和与平均值输出">¶</a>循环输入数据并求取和与平均值输出</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">  <span class="comment">//和</span></span><br><span class="line">  <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//计算输入字数</span></span><br><span class="line">  <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">  System.out.println(<span class="string">&quot;请输入数据&quot;</span>);</span><br><span class="line">  <span class="comment">//循环判断是否还有输入，并进行运算</span></span><br><span class="line">  <span class="keyword">while</span>(scanner.hasNextDouble())&#123;</span><br><span class="line">      <span class="keyword">double</span> temp = scanner.nextDouble();</span><br><span class="line">      m++;</span><br><span class="line">      sum+=temp;</span><br><span class="line">      System.out.println(<span class="string">&quot;当前输入&quot;</span> + m + <span class="string">&quot;个数，&quot;</span> + <span class="string">&quot;和为：&quot;</span> + sum);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;和：&quot;</span> + sum);</span><br><span class="line">  System.out.println(<span class="string">&quot;平均值：&quot;</span> + (sum / m));</span><br><span class="line">  scanner.close();</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="shun-xu-jie-gou"><a class="header-anchor" href="#顺序结构">¶</a>顺序结构</h2>
<p>java的基本结构，从上往下执行语句</p>
<p><strong>是任何一个算法都离不开的一种基本算法结构</strong></p>
<h2 id="xuan-ze-jie-gou"><a class="header-anchor" href="#选择结构">¶</a>选择结构</h2>
<h4 id="if-dan-xuan-ze-jie-gou"><a class="header-anchor" href="#if单选择结构">¶</a>if单选择结构</h4>
<p>用if判断是否执行相关语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔条件)&#123;  <span class="comment">//true执行，false不执行</span></span><br><span class="line">    语句块</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入内容：&quot;</span>);</span><br><span class="line">    String str = scanner.nextLine();</span><br><span class="line">    <span class="keyword">if</span>(str.equals(<span class="string">&quot;hello&quot;</span>))&#123; <span class="comment">//equals判断字符串是否相同</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">    scanner.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="if-shuang-xuan-ze-jie-gou"><a class="header-anchor" href="#if双选择结构">¶</a>if双选择结构</h4>
<p>if-else结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔条件)&#123;  <span class="comment">//true执行</span></span><br><span class="line">    语句块<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;   <span class="comment">//false执行 </span></span><br><span class="line">    语句块<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入成绩：&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> score = scanner.nextInt();</span><br><span class="line">    <span class="keyword">if</span>(score &gt;= <span class="number">60</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    scanner.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="if-duo-xuan-ze-jie-gou"><a class="header-anchor" href="#if多选择结构">¶</a>if多选择结构</h4>
<p>if-else if-else结构，只会选择其中一个分支执行</p>
<p><strong>注意：</strong></p>
<p>1个if语句最多只能有1个else语句，其他的用else if语句，且else语句只能在最后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;  <span class="comment">//条件1为true执行</span></span><br><span class="line">    语句块<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;   <span class="comment">//条件2为true执行 </span></span><br><span class="line">    语句块<span class="number">2</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">3</span>)&#123;   <span class="comment">//条件3为true执行</span></span><br><span class="line">    语句块<span class="number">3</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    语句块<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">   System.out.println(<span class="string">&quot;请输入您的成绩：&quot;</span>);</span><br><span class="line">   <span class="keyword">int</span> score = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(score == <span class="number">100</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;恭喜满分！&quot;</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">99</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">69</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;合格&quot;</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &lt; <span class="number">60</span>)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;成绩不合法&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    scanner.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="if-qian-tao-jie-gou"><a class="header-anchor" href="#if嵌套结构">¶</a>if嵌套结构</h4>
<p>if - if -else -else结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;  <span class="comment">//true执行</span></span><br><span class="line">    <span class="keyword">if</span>(条件<span class="number">2</span>)&#123; <span class="comment">//true执行</span></span><br><span class="line">        语句块<span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;   <span class="comment">//条件2为false执行</span></span><br><span class="line">        语句块<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;   <span class="comment">//条件1为false执行 </span></span><br><span class="line">    语句块<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="switch-xuan-ze-jie-gou"><a class="header-anchor" href="#switch选择结构">¶</a>switch选择结构</h4>
<p>switch-case-case结构</p>
<p>判断一个变量是否等于一个case的值，每个case都为一个分支，选择一个分支进行执行</p>
<p><strong>switch语句中的变量类型可以是：</strong></p>
<ol>
<li>byte、short、int或者char</li>
<li><strong>javaSE7开始，支持字符串String类型</strong></li>
<li>case标签必须为字符串常量或者字面量</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value:</span><br><span class="line">        语句块<span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> value：</span><br><span class="line">        语句块<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">//可选，不加会往下继续执行case</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">//可选</span></span><br><span class="line">        语句块<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> grade = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    <span class="keyword">switch</span> (grade)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">           System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">           System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">           System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">           System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></figure>
<p>==支持字符串的本质：==</p>
<p>反编译：java—clsss（字节码文件）–反编译</p>
<p>每一个字符或字符串的本质都是数字</p>
<p>因此通过str.hashcode()将字符串反编译为数字来进行识别</p>
<hr>
<h2 id="xun-huan-jie-gou"><a class="header-anchor" href="#循环结构">¶</a>循环结构</h2>
<h4 id="while-xun-huan"><a class="header-anchor" href="#while循环">¶</a>while循环</h4>
<p>最基本的循环，while的<strong>条件一直为true，就会一直执行</strong></p>
<p>实际情况中只有少部分情况需要循环一直执行，如监听</p>
<p>大多数情况循环一直执行会造成无限循环（死循环）</p>
<p>会大量消耗系统性能或造成程序卡死</p>
<p>所以需要<strong>一个让表达式失效的方式</strong>来结束循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(表达式)&#123;</span><br><span class="line">  <span class="comment">//循环内容   </span></span><br><span class="line">&#125;</span><br><span class="line">例：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//输出1-100</span></span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(i &lt; <span class="number">100</span>)&#123;</span><br><span class="line">   i++;</span><br><span class="line">      System.out.println(i);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="do-while-xun-huan"><a class="header-anchor" href="#do-while循环">¶</a>do while循环</h4>
<p>while循环需要满足条件为true才能进入循环</p>
<p>do while循环则是<strong>先进入循环，再判断条件是否继续循环</strong></p>
<p>也就是循环<strong>至少执行一次</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//循环内容</span></span><br><span class="line">&#125;<span class="keyword">while</span>(条件);</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(i &lt; <span class="number">0</span>)&#123;</span><br><span class="line">       System.out.println(i);</span><br><span class="line">       i++;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;<span class="keyword">while</span>(i &lt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="for-xun-huan"><a class="header-anchor" href="#for循环">¶</a>for循环</h4>
<p>for循环能让循环结构更简单</p>
<p>是一种迭代结构的循环，最有效，最灵活</p>
<p>for循环的执行次数在执行前就是确定的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化;表达式;更新)&#123;</span><br><span class="line">	<span class="comment">//循环语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化值、条件判断、迭代更新</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==for循环的注意事项：==</p>
<ol>
<li>初始化步骤可以声明一个或多个变量，也可以是空</li>
<li>检测表达式的值true执行循环，false跳出循环</li>
<li>执行一次循环后更新循环变量的值</li>
<li>然后再检测条件是否为true</li>
</ol>
<p>println()输出完后会自动换行</p>
<p>print()输出完不会换行</p>
<h4 id="for-xun-huan-jin-jie-shi-yong-shi-li"><a class="header-anchor" href="#for循环进阶使用示例">¶</a>for循环进阶使用示例</h4>
<p>输出1-1000能被五整除的数，每行输出3个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">15</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出九九乘法表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;*&quot;</span> + j + <span class="string">&quot;=&quot;</span> + i * j + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印菱形</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正三角形</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">6</span>; j &gt; i; j--) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">2</span> * i + <span class="number">1</span>); j++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//倒三角</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">2</span> * <span class="number">6</span>; j &gt; (<span class="number">2</span> * i + <span class="number">1</span>); j--) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="zeng-qiang-xing-for-xun-huan"><a class="header-anchor" href="#增强型for循环">¶</a>增强型for循环</h4>
<p>java5开始新增</p>
<p>主要用于<strong>数组或集合</strong>的for循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 : 表达式)&#123;</span><br><span class="line"><span class="comment">//循环语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>声明语句：</p>
<ol>
<li>声明新的局部变量</li>
<li>该变量类型必须和数组元素的类型匹配</li>
<li>其作用域限定在循环内</li>
<li>其值与此时数组元素的值相等</li>
</ol>
<p>表达式：</p>
<ol>
<li>表达式是要访问的数组名</li>
<li>或者是返回值为数组的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;;</span><br><span class="line">    <span class="comment">//遍历数组的元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x : numbers)&#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">    <span class="comment">//等效for循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        System.out.println(numbers[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="break-coutinue-goto"><a class="header-anchor" href="#break-coutinue-goto">¶</a>break coutinue goto</h4>
<p><strong>break</strong>，可以控制循环的流程，用于强行退出循环，不执行循环中的其他语句（在switch中也可以使用）</p>
<p><strong>continue</strong>，用于终止某次循环的过程，跳过本次循环中未执行的语句，直接进行下一次循环的判断，执行下一次循环</p>
<p><strong>goto</strong>，java没有goto，和带标签的break和continue类似</p>
<p><strong>带标签：</strong></p>
<ol>
<li>标签指后面跟一个冒号的标识符，如label:</li>
<li>唯一用到标签的地方是循环语句前</li>
<li>这种场景是希望在其中嵌套另一个循环</li>
<li>由于break和continue一般只会中断当前所在循环</li>
<li>如果带标签使用，就会中断到标签所在的地方</li>
<li>语法  label:    continue label;</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>“Java基础”</tag>
      </tags>
  </entry>
  <entry>
    <title>Java方法详解</title>
    <url>/2021/04/30/Java/Java%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="java-fang-fa-xiang-jie">Java方法详解</h1>
<h2 id="shi-yao-shi-fang-fa"><a class="header-anchor" href="#什么是方法">¶</a>什么是方法</h2>
<p><strong>方法概述：</strong></p>
<ol>
<li>
<p>是执行某个特定功能的代码片段</p>
</li>
<li>
<p>方法包含于类或对象中</p>
</li>
<li>
<p>方法在程序中被创建，在其他地方被引用</p>
</li>
</ol>
<p><strong>设计方法的原则：</strong></p>
<ol>
<li>
<p>方法的本质是功能块，实现某个功能</p>
</li>
<li>
<p>设计方法的时候最好保持方法的原子性（只实现一个功能）</p>
</li>
</ol>
<p><strong>方法的定义：</strong></p>
<p>方法包含一个方法头和方法体：</p>
<ol>
<li>修饰符：可选，告诉编译器如何调用该方法，定义方法的访问类型</li>
<li>返回值类型：可能会返回值，没有返回值则为void</li>
<li>方法名：方法名称，和参数表共同构成方法签名</li>
<li>参数类型：
<ol>
<li>可选，可不带参数。</li>
<li>方法被调用时，传递值给参数</li>
<li>参数列表指方法的参数类型、顺序和参数的个数</li>
<li>形参：方法调用用于接收外界输入的数据</li>
<li>实参：调用方法传递给方法的数据</li>
</ol>
</li>
<li>方法体：具体的方法语句，定义方法的功能</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符  返回值类型  方法名(参数类型  参数名)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line">例：</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//实参：实际调用传递的参数</span></span><br><span class="line">        <span class="keyword">int</span> sum = add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">	<span class="comment">//形参：用来定义的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>==return 0; //表示终止方法，类似break==</p>
<p><strong>方法的调用</strong></p>
<p>调用方式都是  对象名.方法名，但有两种方式</p>
<ol>
<li>
<p>方法返回值时，方法调用被当作一个值：</p>
<p>如：int num = max(30, 40);</p>
</li>
<li>
<p>如果方法无返回值，调用为一条语句</p>
<p>如：System.out.println(“XXX”);</p>
</li>
</ol>
<h2 id="kuo-zhan-zhi-chuan-di-he-yin-yong-chuan-di"><a class="header-anchor" href="#扩展（值传递和引用传递）">¶</a>扩展（值传递和引用传递）</h2>
<h2 id="fang-fa-de-zhong-zai"><a class="header-anchor" href="#方法的重载">¶</a>方法的重载</h2>
<p>重载就是在一个类中，有相同的函数名称</p>
<p>但是形参不同的函数</p>
<p><strong>重载的原则：</strong></p>
<ol>
<li>方法名称必须相同</li>
<li>参数列表必须不同（个数不同或类型不同，参数排列顺序不同等）</li>
<li>方法的返回类型可以相同也可以不同</li>
<li>如果只是返回类型不同不能够称为方法的重载</li>
</ol>
<p><strong>实现：</strong></p>
<ol>
<li>方法名相同时，编译器会根据调用方法的参数个数、类型等逐个匹配</li>
<li>匹配完后选择最为准确的方法调用</li>
<li>如果匹配失败，则编译器报错</li>
</ol>
<h2 id="ming-ling-xing-chuan-can-liao-jie"><a class="header-anchor" href="#命令行传参（了解）">¶</a>命令行传参（了解）</h2>
<p>程序在运行的时候再传递给它消息，通过main()函数实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.renjie.wei.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String i : args) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[]:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cmd或terminal中调用传参：</span></span><br><span class="line">D:\JavaSE\基础语法\src\com\renjie\wei\method&gt; javac Demo02.java</span><br><span class="line">    </span><br><span class="line">D:\JavaSE\基础语法\src&gt; </span><br><span class="line">java com.renjie.wei.method.Demo02.java hello world ! <span class="comment">//其中hello world！就是传递的参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出如下：</span></span><br><span class="line">args[]:hello</span><br><span class="line">args[]:world</span><br><span class="line">args[]:!</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="ke-bian-can-shu"><a class="header-anchor" href="#可变参数">¶</a>可变参数</h2>
<ol>
<li>
<p>Java 1.5开始出现</p>
</li>
<li>
<p>支持传递同类型的可变参数给一个方法</p>
</li>
<li>
<p>声明中，在指定参数类型后加一个省略号(…)</p>
</li>
<li>
<p>一个方法中只能指定一个可变参数</p>
</li>
<li>
<p>但必须是方法的最后一个参数</p>
</li>
<li>
<p>任何普通的参数都必须在可变参数之前声明</p>
</li>
<li>
<p>本质就是数组</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo03 demo03 = <span class="keyword">new</span> Demo03();</span><br><span class="line">        demo03.test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可变参数实质就是数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>... b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            System.out.println(a+b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="di-gui"><a class="header-anchor" href="#递归">¶</a>递归</h2>
<ol>
<li>
<p>递归就是自己调用自己</p>
</li>
<li>
<p>递归可以用简单的程序解决复杂的问题</p>
</li>
<li>
<p>用少量的程序描述出解题过程所需要的多次重复运算</p>
</li>
<li>
<p>大大减少了程序的代码量</p>
</li>
<li>
<p>递归的能力在于用有限的语句来定义对象的无限集合</p>
</li>
</ol>
<p><strong>递归的结构：</strong></p>
<ol>
<li>递归头：什么时候不调用自己，没有头将陷入死循环</li>
<li>递归体：什么时候调用自身方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Demo04 demo04 = <span class="keyword">new</span> Demo04();</span><br><span class="line">    System.out.println(demo04.fatorial(<span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fatorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;   <span class="comment">//递归边界，递归头</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n * fatorial(n-<span class="number">1</span>);  <span class="comment">//递归体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ji-suan-qi-shi-li"><a class="header-anchor" href="#计算器示例">¶</a>计算器示例</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Demo05 demo05 = <span class="keyword">new</span> Demo05();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要使用的功能：&quot;</span>);</span><br><span class="line">        String arith = scanner.nextLine();  <span class="comment">//决定四则运算的符号</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第一个数字：&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> x = scanner.nextDouble();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入第二个数字：&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> y = scanner.nextDouble();</span><br><span class="line">        <span class="keyword">switch</span> (arith)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:  <span class="comment">//加法</span></span><br><span class="line">                System.out.print(<span class="string">&quot;计算结果为：&quot;</span>);</span><br><span class="line">                    System.out.println(demo05.add(x,y));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:  <span class="comment">//减法</span></span><br><span class="line">                System.out.print(<span class="string">&quot;计算结果为：&quot;</span>);</span><br><span class="line">                    System.out.println(demo05.sub(x,y));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:  <span class="comment">//乘法</span></span><br><span class="line">                System.out.print(<span class="string">&quot;计算结果为：&quot;</span>);</span><br><span class="line">                    System.out.println(demo05.mul(x,y));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:  <span class="comment">//除法</span></span><br><span class="line">                System.out.print(<span class="string">&quot;计算结果为：&quot;</span>);</span><br><span class="line">                    System.out.println(demo05.div(x,y));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a - b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a * b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入错误请重新输入！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> (a / b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>“Java基础”</tag>
      </tags>
  </entry>
  <entry>
    <title>Java初见</title>
    <url>/2021/04/30/Java/Java%E5%88%9D%E8%A7%81/</url>
    <content><![CDATA[<h1 id="java-chu-jian">Java初见</h1>
<h2 id="san-da-ban-ben"><a class="header-anchor" href="#三大版本">¶</a>三大版本</h2>
<p><strong>JavaSE</strong>，标准版，桌面程序，控制台开始</p>
<p><strong>javaME</strong>，嵌入式开发，手机，小家电</p>
<p><strong>javaEE</strong>，E企业级开发，web端，服务器开发</p>
<p><strong>JDK</strong>，Java Development Kit</p>
<p><strong>JRE</strong>，Java Runtime Environment</p>
<p><strong>JVM</strong>，Java Virtual Machine</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>“Java基础”</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之Hello World</title>
    <url>/2021/04/30/Java/java/</url>
    <content><![CDATA[<h1 id="java-zhi-hello-world">Java之Hello World</h1>
<ol>
<li>
<p>新建文件后缀名为.java</p>
</li>
<li>
<p>编写代码</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;Hello,world!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>通过javac编译 java文件，生成一个同名class文件</li>
<li>运行calss文件</li>
</ol>
<p><strong>注意：</strong></p>
<ol>
<li>大小写不能出现问题</li>
<li>尽量使用英文符号和输出</li>
<li>文件名和类名必须保证一致</li>
</ol>
<h1 id="java-yun-xing-ji-zhi">Java运行机制</h1>
<h2 id="bian-yi-xing-bian-yi-qi"><a class="header-anchor" href="#编译型（编译器）">¶</a>编译型（编译器）</h2>
<p>将代码整个进行编译为计算机可以读懂的语言，若有修改则需要重新编译。</p>
<p>C/C++，操作系统类，速度慢，但可直接运行</p>
<h2 id="jie-shi-xing"><a class="header-anchor" href="#解释型">¶</a>解释型</h2>
<p>按需要对代码进行编译，修改也只需要重新编译修改的部分，比较消耗性能。</p>
<p>网页，脚本，对速度要求不高，Java/JS/Python</p>
<h2 id="yun-xing-ji-zhi"><a class="header-anchor" href="#运行机制">¶</a>运行机制</h2>
<p>java源程序.java文件 —&gt;通过javac命令编译为.clss文件—&gt;通过解释器按指令执行</p>
<h2 id="idea"><a class="header-anchor" href="#IDEA">¶</a>IDEA</h2>
<h3 id="shi-yao-shi-ide"><a class="header-anchor" href="#什么是IDE">¶</a>什么是IDE</h3>
<p>集成开发环境</p>
<h2 id="java-ji-chu-yu-fa"><a class="header-anchor" href="#Java基础语法">¶</a>Java基础语法</h2>
<h3 id="zhu-shi"><a class="header-anchor" href="#注释">¶</a>注释</h3>
<p><strong>注释不会执行，便于可读</strong></p>
<p><strong>注释规范如下</strong></p>
<p>// 单行注释</p>
<p>/*   多行注释  */</p>
<p>/**  JavaDoc文档注释  */</p>
<h3 id="biao-shi-fu-guan-jian-zi"><a class="header-anchor" href="#标识符、关键字">¶</a>标识符、关键字</h3>
<p>Java所有的组成部分都需要名字</p>
<p>类名、变量名、方法名都需要名字，称为标识符</p>
<p>不能使用关键字作为名字，如class class</p>
<p><strong>标识符只能以字母、美元$，下划线开始</strong>，首字母后可以任意组合</p>
<p><strong>标识符是大小写敏感的</strong></p>
<p><strong>不建议用中文、拼音、特殊符号命名，不推荐</strong></p>
<h3 id="shu-ju-lei-xing"><a class="header-anchor" href="#数据类型">¶</a>数据类型</h3>
<p><strong>Java，强类型语言</strong>，所有变量都需要先定义后才能使用</p>
<p>Java数据类型分为两大类</p>
<ol>
<li>
<p>基本类型</p>
<ol>
<li>
<p>整数类型</p>
<p>byte（1字节）、short（2字节）、int（4字节）、long（8字节）</p>
<p><strong>注：long定义的值后需要加L表示</strong></p>
<p><strong>long = 30L</strong></p>
</li>
<li>
<p>浮点数</p>
<p>float（4字节）、double（8字节）</p>
<p><strong>注：float定义的值后需要加F表示</strong></p>
<p><strong>float = 5.1F</strong></p>
</li>
<li>
<p>字符型</p>
<p>char（2字节）</p>
<p><strong>注：char只能对应单个字符，‘A’或‘我’</strong></p>
</li>
<li>
<p>boolean型（只占1位）</p>
<p><strong>只有true、false两个值</strong></p>
</li>
</ol>
</li>
<li>
<p>引用类型，除基本类型外的类型</p>
<ol>
<li>类</li>
<li>接口</li>
<li>数组</li>
</ol>
</li>
</ol>
<h3 id="shu-ju-lei-xing-tuo-zhan"><a class="header-anchor" href="#数据类型拓展">¶</a>数据类型拓展</h3>
<h4 id="zheng-shu-kuo-zhan"><a class="header-anchor" href="#整数扩展">¶</a>整数扩展</h4>
<p>二进制以0b开始</p>
<p>八进制以0开始，010</p>
<p>十六进制以0x开始，0x10</p>
<hr>
<h4 id="fu-dian-shu-kuo-zhan"><a class="header-anchor" href="#浮点数扩展">¶</a>浮点数扩展</h4>
<p>float f = 0.1f，double d = 1.0/10，f  == d结果为false</p>
<p>float d1 = 20f，d2 = d1 + 1 ,  d1 == d2结果为true</p>
<p><strong>float  代表的值有限且离散的，存在舍入误差，是个大约值，接近但不等于，<em>最好避免使用浮点数进行比较</em></strong></p>
<p><em>BigDecimal，数学工具类，用于精度高的场景</em></p>
<hr>
<h4 id="zi-fu-kuo-zhan"><a class="header-anchor" href="#字符扩展">¶</a>字符扩展</h4>
<p><strong>所有的字符（包括汉字）本质还是数字</strong></p>
<p><strong>Java使用Unicode编码，2个字节（U0000-UFFFF）</strong></p>
<p>char a = ‘a’ 与 char b = '\u0061’输出结果一致（十六进制）</p>
<h4 id="chang-yong-zhuan-yi-zi-fu"><a class="header-anchor" href="#常用转义字符">¶</a>常用转义字符</h4>
<p>\t ，制表符</p>
<p>\n，换行</p>
<p>\u，转unicode编码</p>
<h4 id="boolean-zhi-kuo-zhan"><a class="header-anchor" href="#boolean值扩展">¶</a>boolean值扩展</h4>
<p>boolean flag = true；</p>
<p>if(flag){}与if(flag == true){}效果一致</p>
<h3 id="lei-xing-zhuan-huan"><a class="header-anchor" href="#类型转换">¶</a>类型转换</h3>
<p>java是强类型语言</p>
<p><strong>byte -&gt; short, char -&gt; int -&gt; long -&gt; float -&gt;double</strong></p>
<p><strong>等级由低到高，不同类型数据先转化为同一类型再计算</strong></p>
<h4 id="qiang-zhi-lei-xing-zhuan-huan"><a class="header-anchor" href="#强制类型转换">¶</a>强制类型转换</h4>
<p>（int）a</p>
<p>（float）a</p>
<h4 id="zi-dong-lei-xing-zhuan-huan"><a class="header-anchor" href="#自动类型转换">¶</a>自动类型转换</h4>
<p>等级低到高自动转换</p>
<p>int i = 128</p>
<p>byte a = i，会报错（内存溢出），只能byte a = (byte) i 强制转换</p>
<p>double a = i 可以自动转换，不用强制</p>
<p><strong>注意：</strong></p>
<ol>
<li>不能对布尔值进行转换</li>
<li>不能把对象类型转换为不相干的类型</li>
<li>在把高容量转换到低容量的时候，强制转换</li>
<li>转换时可能存在内存溢出或精度改变问题</li>
</ol>
<h3 id="nei-cun-yi-chu-wen-ti"><a class="header-anchor" href="#内存溢出问题">¶</a>内存溢出问题</h3>
<p>int money = 10_0000_0000</p>
<p><strong>//jdk7新特性，下划线便于观察，不会输出</strong></p>
<p>int years = 20；</p>
<p>int total = money * years; //存在内存溢出，会输出乱值</p>
<p>long total2 =  money * years; //先转型，后输出，依旧输出乱值</p>
<p>long total3 =  money * (long)years; // 先转换后计算，输出正常</p>
<h3 id="bian-liang-chang-liang-zuo-yong-yu"><a class="header-anchor" href="#变量-常量-作用域">¶</a>变量  常量  作用域</h3>
<h4 id="bian-liang"><a class="header-anchor" href="#变量">¶</a>变量</h4>
<p>变量是程序中最基本的存储单元，要素包括变量名、类型和作用域</p>
<p>type varName [=value] [{, varName[ = value]}]</p>
<p>//数据类型 变量名 = 值，可以使用逗号隔开来声明多个同类型变量</p>
<p><strong>注意：</strong></p>
<ol>
<li>每个变量都需要有类型，可以是基本类型或引用类型</li>
<li>变量名必须是合法的标识符</li>
<li>变量声明是一条完整的语句，需要用分号来结束</li>
</ol>
<h4 id="bian-liang-zuo-yong-yu"><a class="header-anchor" href="#变量作用域">¶</a>变量作用域</h4>
<ol>
<li>
<p>类变量，加static关键词，从属于类</p>
</li>
<li>
<p>实例变量，类的里面，方法的外面定义，从属于对象</p>
</li>
<li>
<p>局部变量，只在方法范围里生效</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性：变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> allClicks = <span class="number">0</span>; <span class="comment">//类变量</span></span><br><span class="line">    </span><br><span class="line">    String str = <span class="string">&#x27;Hello World&#x27;</span>; <span class="comment">//实例变量，如果不初始化，值为该类型的默认值</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">//局部变量，必须声明和初始化值</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用示例变量</span></span><br><span class="line">        Variable variable = <span class="keyword">new</span> Variable();<span class="comment">//声明一个对象类型</span></span><br><span class="line">        System.out.println(variable.str);</span><br><span class="line">        System.out.println(variable.age);</span><br><span class="line">        System.out.println(variable.name);<span class="comment">//输出实例变量的值</span></span><br><span class="line"> <span class="comment">//数值类型默认值为0或0.0，boolean类型默认false，基本类型外默认值都是null</span></span><br><span class="line">        System.out.println(allClicks); <span class="comment">//类变量不需要new对象，可直接输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="chang-liang"><a class="header-anchor" href="#常量">¶</a>常量</h3>
<p>特殊的变量，值一旦定义不允许被改变</p>
<p>final 常量名 = 值</p>
<p><strong>final为修饰词，不存在先后顺序</strong></p>
<p>static final double PI = 3.14</p>
<p>final static double PI = 3.14效果一致</p>
<p><strong>常量名一般使用大写字母表示</strong></p>
<h4 id="bian-liang-de-ming-ming-gui-fan"><a class="header-anchor" href="#变量的命名规范">¶</a>变量的命名规范</h4>
<p>驼峰原则：第一个单词后的单词首字母大写</p>
<ol>
<li>所有变量、方法、类名：见名知意</li>
<li>类成员变量：<strong>首字母小写</strong>和驼峰原则：monthSalary</li>
<li>局部变量：<strong>首字母小写</strong>和驼峰原则</li>
<li>常量：大写字母和下划线：MAX_VALUE</li>
<li>类名：<strong>首字母大写</strong>和驼峰原则：Man</li>
<li>方法名：<strong>首字母小写</strong>和驼峰原则：runRun()</li>
</ol>
<h3 id="yun-suan-fu"><a class="header-anchor" href="#运算符">¶</a>运算符</h3>
<ol>
<li>算数运算符：+ -  *  /  %  ++  –</li>
<li>赋值： =</li>
<li>关系运算符： &gt;  &lt;  &gt;=  &lt;=  !=  instanceof</li>
<li>逻辑运算符： &amp;&amp;  ||  !</li>
<li>位运算符：&amp;  |  ^  ~  &gt;&gt;  &lt;&lt;  &gt;&gt;&gt;</li>
<li>条件运算符： ？ :</li>
<li>扩展赋值运算符： +=  -=  *=  /=</li>
</ol>
<p><strong>注意：</strong></p>
<p>整形运算中，带有long类型的结果为 long，其余类型的结果为int（不论是否存在int类型的变量结果都为 int）</p>
<h4 id="zi-zeng-zi-jian-yun-suan-fu"><a class="header-anchor" href="#自增、自减运算符">¶</a>自增、自减运算符</h4>
<ol>
<li>
<p>一元运算符</p>
</li>
<li>
<p>a++，为先调用a的值，然后在将a的值+1</p>
</li>
<li>
<p>++a，先将a的值+1，然后再调用</p>
</li>
</ol>
<p><strong>例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;</span><br><span class="line"><span class="keyword">int</span> c = ++a;</span><br><span class="line"></span><br><span class="line">System.out.println(a);  <span class="comment">//输出为3</span></span><br><span class="line">System.out.println(b);  <span class="comment">//输出为3</span></span><br><span class="line">System.out.println(c);  <span class="comment">//输出为5</span></span><br></pre></td></tr></table></figure>
<h4 id="mi-yun-suan"><a class="header-anchor" href="#幂运算">¶</a>幂运算</h4>
<p>java里没有幂运算符号</p>
<p><strong>使用Math类，运算工具类</strong></p>
<p>Math.pow(2,3) 为2的3次方</p>
<h4 id="luo-ji-yun-suan-fu-wei-yun-suan-fu"><a class="header-anchor" href="#逻辑运算符、位运算符">¶</a>逻辑运算符、位运算符</h4>
<p>逻辑：与、或、非</p>
<p><strong>注意：</strong></p>
<p>逻辑判断存在短路现象：</p>
<p>如：a &amp;&amp; a++，一旦判断条件a为假，直接返回假，不继续往后判断且执行a++，</p>
<p>位运算：</p>
<ol>
<li>a&amp;b，对应位都为1才为1，反之为0</li>
<li>a | b，对应位有一个为1就为1，都是0为0</li>
<li>a ^ b（异或），对应位相同为0，不同为1</li>
<li>~a（取反），是0则为1，1则为0</li>
<li>“&gt;&gt;”  “&lt;&lt;”，左移，右移</li>
</ol>
<h3 id="qi-ta-yun-suan-fu"><a class="header-anchor" href="#其他运算符">¶</a>其他运算符</h3>
<h4 id="zi-fu-chuan-lian-jie-fu"><a class="header-anchor" href="#字符串连接符">¶</a>字符串连接符 +</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b); <span class="comment">//结果为1020</span></span><br><span class="line">System.out.println(a+b+<span class="string">&quot;&quot;</span>); <span class="comment">//结果为30</span></span><br><span class="line"><span class="comment">//+号为从左到右计算，当存在string类型的值时，会自动转换为string类型</span></span><br></pre></td></tr></table></figure>
<h4 id="san-yuan-yun-suan-fu"><a class="header-anchor" href="#三元运算符">¶</a>三元运算符</h4>
<p>x ? y : z ，如果x == true，结果为y，否则结果为z</p>
<h3 id="you-xian-ji"><a class="header-anchor" href="#优先级">¶</a>优先级</h3>
<p>括号优先，然后一元运算符，二元运算符等</p>
<h3 id="bao-ji-zhi"><a class="header-anchor" href="#包机制">¶</a>包机制</h3>
<p>为了更好组织类，用于区别类名的命名空间，本质为文件夹</p>
<p><strong>一般用公司域名倒置作为包名</strong>：com.baidu.www</p>
<p>包语句的语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baidu.www</span><br></pre></td></tr></table></figure>
<p>java中导入包，使用import</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baidu.www.XXX<span class="comment">/*;//*号代表导入包下所有的类</span></span><br></pre></td></tr></table></figure>
<p>导包的名字尽量不和已知包名重合，会报错</p>
<h3 id="java-doc"><a class="header-anchor" href="#JavaDoc">¶</a>JavaDoc</h3>
<p>用来生成自己的API文档</p>
<p>参数信息：</p>
<p><em>@author 作者名</em></p>
<p><em>@version 版本号</em></p>
<p><em>@since 指明需要最早使用的jdk版本</em></p>
<p><em>@param 参数名</em></p>
<p><em>@return 返回值情况</em></p>
<p><em>@throws 异常抛出情况</em></p>
<p>和注释不一样，能够通过cmd使用javadoc命令生成文档网站</p>
<p>javadoc -encoding UTF-8 -charset UTF-8 xx.java</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>“Java基础”</tag>
      </tags>
  </entry>
</search>
