<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java</title>
    <url>/2021/04/30/java/java/</url>
    <content><![CDATA[<h1 id="java-zhi-hello-world">Java之Hello World</h1>
<ol>
<li>
<p>新建文件后缀名为.java</p>
</li>
<li>
<p>编写代码</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;Hello,world!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>通过javac编译 java文件，生成一个同名class文件</li>
<li>运行calss文件</li>
</ol>
<p><strong>注意：</strong></p>
<ol>
<li>大小写不能出现问题</li>
<li>尽量使用英文符号和输出</li>
<li>文件名和类名必须保证一致</li>
</ol>
<h1 id="java-yun-xing-ji-zhi">Java运行机制</h1>
<h2 id="bian-yi-xing-bian-yi-qi"><a class="header-anchor" href="#编译型（编译器）">¶</a>编译型（编译器）</h2>
<p>将代码整个进行编译为计算机可以读懂的语言，若有修改则需要重新编译。</p>
<p>C/C++，操作系统类，速度慢，但可直接运行</p>
<h2 id="jie-shi-xing"><a class="header-anchor" href="#解释型">¶</a>解释型</h2>
<p>按需要对代码进行编译，修改也只需要重新编译修改的部分，比较消耗性能。</p>
<p>网页，脚本，对速度要求不高，Java/JS/Python</p>
<h2 id="yun-xing-ji-zhi"><a class="header-anchor" href="#运行机制">¶</a>运行机制</h2>
<p>java源程序.java文件 —&gt;通过javac命令编译为.clss文件—&gt;通过解释器按指令执行</p>
<h2 id="idea"><a class="header-anchor" href="#IDEA">¶</a>IDEA</h2>
<h3 id="shi-yao-shi-ide"><a class="header-anchor" href="#什么是IDE">¶</a>什么是IDE</h3>
<p>集成开发环境</p>
<h2 id="java-ji-chu-yu-fa"><a class="header-anchor" href="#Java基础语法">¶</a>Java基础语法</h2>
<h3 id="zhu-shi"><a class="header-anchor" href="#注释">¶</a>注释</h3>
<p><strong>注释不会执行，便于可读</strong></p>
<p><strong>注释规范如下</strong></p>
<p>// 单行注释</p>
<p>/*   多行注释  */</p>
<p>/**  JavaDoc文档注释  */</p>
<h3 id="biao-shi-fu-guan-jian-zi"><a class="header-anchor" href="#标识符、关键字">¶</a>标识符、关键字</h3>
<p>Java所有的组成部分都需要名字</p>
<p>类名、变量名、方法名都需要名字，称为标识符</p>
<p>不能使用关键字作为名字，如class class</p>
<p><strong>标识符只能以字母、美元$，下划线开始</strong>，首字母后可以任意组合</p>
<p><strong>标识符是大小写敏感的</strong></p>
<p><strong>不建议用中文、拼音、特殊符号命名，不推荐</strong></p>
<h3 id="shu-ju-lei-xing"><a class="header-anchor" href="#数据类型">¶</a>数据类型</h3>
<p><strong>Java，强类型语言</strong>，所有变量都需要先定义后才能使用</p>
<p>Java数据类型分为两大类</p>
<ol>
<li>
<p>基本类型</p>
<ol>
<li>
<p>整数类型</p>
<p>byte（1字节）、short（2字节）、int（4字节）、long（8字节）</p>
<p><strong>注：long定义的值后需要加L表示</strong></p>
<p><strong>long = 30L</strong></p>
</li>
<li>
<p>浮点数</p>
<p>float（4字节）、double（8字节）</p>
<p><strong>注：float定义的值后需要加F表示</strong></p>
<p><strong>float = 5.1F</strong></p>
</li>
<li>
<p>字符型</p>
<p>char（2字节）</p>
<p><strong>注：char只能对应单个字符，‘A’或‘我’</strong></p>
</li>
<li>
<p>boolean型（只占1位）</p>
<p><strong>只有true、false两个值</strong></p>
</li>
</ol>
</li>
<li>
<p>引用类型，除基本类型外的类型</p>
<ol>
<li>类</li>
<li>接口</li>
<li>数组</li>
</ol>
</li>
</ol>
<h3 id="shu-ju-lei-xing-tuo-zhan"><a class="header-anchor" href="#数据类型拓展">¶</a>数据类型拓展</h3>
<h4 id="zheng-shu-kuo-zhan"><a class="header-anchor" href="#整数扩展">¶</a>整数扩展</h4>
<p>二进制以0b开始</p>
<p>八进制以0开始，010</p>
<p>十六进制以0x开始，0x10</p>
<hr>
<h4 id="fu-dian-shu-kuo-zhan"><a class="header-anchor" href="#浮点数扩展">¶</a>浮点数扩展</h4>
<p>float f = 0.1f，double d = 1.0/10，f  == d结果为false</p>
<p>float d1 = 20f，d2 = d1 + 1 ,  d1 == d2结果为true</p>
<p><strong>float  代表的值有限且离散的，存在舍入误差，是个大约值，接近但不等于，<em>最好避免使用浮点数进行比较</em></strong></p>
<p><em>BigDecimal，数学工具类，用于精度高的场景</em></p>
<hr>
<h4 id="zi-fu-kuo-zhan"><a class="header-anchor" href="#字符扩展">¶</a>字符扩展</h4>
<p><strong>所有的字符（包括汉字）本质还是数字</strong></p>
<p><strong>Java使用Unicode编码，2个字节（U0000-UFFFF）</strong></p>
<p>char a = ‘a’ 与 char b = '\u0061’输出结果一致（十六进制）</p>
<h4 id="chang-yong-zhuan-yi-zi-fu"><a class="header-anchor" href="#常用转义字符">¶</a>常用转义字符</h4>
<p>\t ，制表符</p>
<p>\n，换行</p>
<p>\u，转unicode编码</p>
<h4 id="boolean-zhi-kuo-zhan"><a class="header-anchor" href="#boolean值扩展">¶</a>boolean值扩展</h4>
<p>boolean flag = true；</p>
<p>if(flag){}与if(flag == true){}效果一致</p>
<h3 id="lei-xing-zhuan-huan"><a class="header-anchor" href="#类型转换">¶</a>类型转换</h3>
<p>java是强类型语言</p>
<p><strong>byte -&gt; short, char -&gt; int -&gt; long -&gt; float -&gt;double</strong></p>
<p><strong>等级由低到高，不同类型数据先转化为同一类型再计算</strong></p>
<h4 id="qiang-zhi-lei-xing-zhuan-huan"><a class="header-anchor" href="#强制类型转换">¶</a>强制类型转换</h4>
<p>（int）a</p>
<p>（float）a</p>
<h4 id="zi-dong-lei-xing-zhuan-huan"><a class="header-anchor" href="#自动类型转换">¶</a>自动类型转换</h4>
<p>等级低到高自动转换</p>
<p>int i = 128</p>
<p>byte a = i，会报错（内存溢出），只能byte a = (byte) i 强制转换</p>
<p>double a = i 可以自动转换，不用强制</p>
<p><strong>注意：</strong></p>
<ol>
<li>不能对布尔值进行转换</li>
<li>不能把对象类型转换为不相干的类型</li>
<li>在把高容量转换到低容量的时候，强制转换</li>
<li>转换时可能存在内存溢出或精度改变问题</li>
</ol>
<h3 id="nei-cun-yi-chu-wen-ti"><a class="header-anchor" href="#内存溢出问题">¶</a>内存溢出问题</h3>
<p>int money = 10_0000_0000</p>
<p><strong>//jdk7新特性，下划线便于观察，不会输出</strong></p>
<p>int years = 20；</p>
<p>int total = money * years; //存在内存溢出，会输出乱值</p>
<p>long total2 =  money * years; //先转型，后输出，依旧输出乱值</p>
<p>long total3 =  money * (long)years; // 先转换后计算，输出正常</p>
<h3 id="bian-liang-chang-liang-zuo-yong-yu"><a class="header-anchor" href="#变量-常量-作用域">¶</a>变量  常量  作用域</h3>
<h4 id="bian-liang"><a class="header-anchor" href="#变量">¶</a>变量</h4>
<p>变量是程序中最基本的存储单元，要素包括变量名、类型和作用域</p>
<p>type varName [=value] [{, varName[ = value]}]</p>
<p>//数据类型 变量名 = 值，可以使用逗号隔开来声明多个同类型变量</p>
<p><strong>注意：</strong></p>
<ol>
<li>每个变量都需要有类型，可以是基本类型或引用类型</li>
<li>变量名必须是合法的标识符</li>
<li>变量声明是一条完整的语句，需要用分号来结束</li>
</ol>
<h4 id="bian-liang-zuo-yong-yu"><a class="header-anchor" href="#变量作用域">¶</a>变量作用域</h4>
<ol>
<li>
<p>类变量，加static关键词，从属于类</p>
</li>
<li>
<p>实例变量，类的里面，方法的外面定义，从属于对象</p>
</li>
<li>
<p>局部变量，只在方法范围里生效</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性：变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> allClicks = <span class="number">0</span>; <span class="comment">//类变量</span></span><br><span class="line">    </span><br><span class="line">    String str = <span class="string">&#x27;Hello World&#x27;</span>; <span class="comment">//实例变量，如果不初始化，值为该类型的默认值</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">//局部变量，必须声明和初始化值</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用示例变量</span></span><br><span class="line">        Variable variable = <span class="keyword">new</span> Variable();<span class="comment">//声明一个对象类型</span></span><br><span class="line">        System.out.println(variable.str);</span><br><span class="line">        System.out.println(variable.age);</span><br><span class="line">        System.out.println(variable.name);<span class="comment">//输出实例变量的值</span></span><br><span class="line"> <span class="comment">//数值类型默认值为0或0.0，boolean类型默认false，基本类型外默认值都是null</span></span><br><span class="line">        System.out.println(allClicks); <span class="comment">//类变量不需要new对象，可直接输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="chang-liang"><a class="header-anchor" href="#常量">¶</a>常量</h3>
<p>特殊的变量，值一旦定义不允许被改变</p>
<p>final 常量名 = 值</p>
<p><strong>final为修饰词，不存在先后顺序</strong></p>
<p>static final double PI = 3.14</p>
<p>final static double PI = 3.14效果一致</p>
<p><strong>常量名一般使用大写字母表示</strong></p>
<h4 id="bian-liang-de-ming-ming-gui-fan"><a class="header-anchor" href="#变量的命名规范">¶</a>变量的命名规范</h4>
<p>驼峰原则：第一个单词后的单词首字母大写</p>
<ol>
<li>所有变量、方法、类名：见名知意</li>
<li>类成员变量：<strong>首字母小写</strong>和驼峰原则：monthSalary</li>
<li>局部变量：<strong>首字母小写</strong>和驼峰原则</li>
<li>常量：大写字母和下划线：MAX_VALUE</li>
<li>类名：<strong>首字母大写</strong>和驼峰原则：Man</li>
<li>方法名：<strong>首字母小写</strong>和驼峰原则：runRun()</li>
</ol>
<h3 id="yun-suan-fu"><a class="header-anchor" href="#运算符">¶</a>运算符</h3>
<ol>
<li>算数运算符：+ -  *  /  %  ++  –</li>
<li>赋值： =</li>
<li>关系运算符： &gt;  &lt;  &gt;=  &lt;=  !=  instanceof</li>
<li>逻辑运算符： &amp;&amp;  ||  !</li>
<li>位运算符：&amp;  |  ^  ~  &gt;&gt;  &lt;&lt;  &gt;&gt;&gt;</li>
<li>条件运算符： ？ :</li>
<li>扩展赋值运算符： +=  -=  *=  /=</li>
</ol>
<p><strong>注意：</strong></p>
<p>整形运算中，带有long类型的结果为 long，其余类型的结果为int（不论是否存在int类型的变量结果都为 int）</p>
<h4 id="zi-zeng-zi-jian-yun-suan-fu"><a class="header-anchor" href="#自增、自减运算符">¶</a>自增、自减运算符</h4>
<ol>
<li>
<p>一元运算符</p>
</li>
<li>
<p>a++，为先调用a的值，然后在将a的值+1</p>
</li>
<li>
<p>++a，先将a的值+1，然后再调用</p>
</li>
</ol>
<p><strong>例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;</span><br><span class="line"><span class="keyword">int</span> c = ++a;</span><br><span class="line"></span><br><span class="line">System.out.println(a);  <span class="comment">//输出为3</span></span><br><span class="line">System.out.println(b);  <span class="comment">//输出为3</span></span><br><span class="line">System.out.println(c);  <span class="comment">//输出为5</span></span><br></pre></td></tr></table></figure>
<h4 id="mi-yun-suan"><a class="header-anchor" href="#幂运算">¶</a>幂运算</h4>
<p>java里没有幂运算符号</p>
<p><strong>使用Math类，运算工具类</strong></p>
<p>Math.pow(2,3) 为2的3次方</p>
<h4 id="luo-ji-yun-suan-fu-wei-yun-suan-fu"><a class="header-anchor" href="#逻辑运算符、位运算符">¶</a>逻辑运算符、位运算符</h4>
<p>逻辑：与、或、非</p>
<p><strong>注意：</strong></p>
<p>逻辑判断存在短路现象：</p>
<p>如：a &amp;&amp; a++，一旦判断条件a为假，直接返回假，不继续往后判断且执行a++，</p>
<p>位运算：</p>
<ol>
<li>a&amp;b，对应位都为1才为1，反之为0</li>
<li>a | b，对应位有一个为1就为1，都是0为0</li>
<li>a ^ b（异或），对应位相同为0，不同为1</li>
<li>~a（取反），是0则为1，1则为0</li>
<li>“&gt;&gt;”  “&lt;&lt;”，左移，右移</li>
</ol>
<h3 id="qi-ta-yun-suan-fu"><a class="header-anchor" href="#其他运算符">¶</a>其他运算符</h3>
<h4 id="zi-fu-chuan-lian-jie-fu"><a class="header-anchor" href="#字符串连接符">¶</a>字符串连接符 +</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b); <span class="comment">//结果为1020</span></span><br><span class="line">System.out.println(a+b+<span class="string">&quot;&quot;</span>); <span class="comment">//结果为30</span></span><br><span class="line"><span class="comment">//+号为从左到右计算，当存在string类型的值时，会自动转换为string类型</span></span><br></pre></td></tr></table></figure>
<h4 id="san-yuan-yun-suan-fu"><a class="header-anchor" href="#三元运算符">¶</a>三元运算符</h4>
<p>x ? y : z ，如果x == true，结果为y，否则结果为z</p>
<h3 id="you-xian-ji"><a class="header-anchor" href="#优先级">¶</a>优先级</h3>
<p>括号优先，然后一元运算符，二元运算符等</p>
<h3 id="bao-ji-zhi"><a class="header-anchor" href="#包机制">¶</a>包机制</h3>
<p>为了更好组织类，用于区别类名的命名空间，本质为文件夹</p>
<p><strong>一般用公司域名倒置作为包名</strong>：com.baidu.www</p>
<p>包语句的语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baidu.www</span><br></pre></td></tr></table></figure>
<p>java中导入包，使用import</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baidu.www.XXX<span class="comment">/*;//*号代表导入包下所有的类</span></span><br></pre></td></tr></table></figure>
<p>导包的名字尽量不和已知包名重合，会报错</p>
<h3 id="java-doc"><a class="header-anchor" href="#JavaDoc">¶</a>JavaDoc</h3>
<p>用来生成自己的API文档</p>
<p>参数信息：</p>
<p><em>@author 作者名</em></p>
<p><em>@version 版本号</em></p>
<p><em>@since 指明需要最早使用的jdk版本</em></p>
<p><em>@param 参数名</em></p>
<p><em>@return 返回值情况</em></p>
<p><em>@throws 异常抛出情况</em></p>
<p>和注释不一样，能够通过cmd使用javadoc命令生成文档网站</p>
<p>javadoc -encoding UTF-8 -charset UTF-8 xx.java</p>
]]></content>
      <tags>
        <tag>“java”</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2021/04/30/test/test/</url>
    <content><![CDATA[<h1 id="yi-ji-biao-ti">一级标题</h1>
<p>test</p>
<h2 id="er-ji-biao-ti"><a class="header-anchor" href="#二级标题">¶</a>二级标题</h2>
<p>test</p>
<h3 id="san-ji"><a class="header-anchor" href="#三级">¶</a>三级</h3>
<p>test</p>
<h4 id="si-ji"><a class="header-anchor" href="#四级">¶</a>四级</h4>
<p>test</p>
<h1 id="yi-ji-biao-ti-1">一级标题</h1>
<h2 id="er-ji-biao-ti-1"><a class="header-anchor" href="#二级标题-v2">¶</a>二级标题</h2>
<p>test</p>
<h2 id="er-ji-biao-ti-2"><a class="header-anchor" href="#二级标题-v3">¶</a>二级标题</h2>
<p>test</p>
<h3 id="san-ji-1"><a class="header-anchor" href="#三级-v2">¶</a>三级</h3>
<p>test</p>
<h3 id="san-ji-2"><a class="header-anchor" href="#三级-v3">¶</a>三级</h3>
<p>test</p>
<h1 id="yi-ji-biao-ti-2">一级标题</h1>
<h2 id="er-ji-biao-ti-3"><a class="header-anchor" href="#二级标题-v4">¶</a>二级标题</h2>
<p>test</p>
<h2 id="er-ji-biao-ti-4"><a class="header-anchor" href="#二级标题-v5">¶</a>二级标题</h2>
<p>test</p>
<h2 id="er-ji-biao-ti-5"><a class="header-anchor" href="#二级标题-v6">¶</a>二级标题</h2>
<p>test</p>
<h1 id="yi-ji-biao-ti-3">一级标题</h1>
<h2 id="er-ji-biao-ti-6"><a class="header-anchor" href="#二级标题-v7">¶</a>二级标题</h2>
<p>test</p>
<h2 id="er-ji-biao-ti-7"><a class="header-anchor" href="#二级标题-v8">¶</a>二级标题</h2>
<p>test</p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
